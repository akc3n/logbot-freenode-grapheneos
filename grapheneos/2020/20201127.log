00:07:42 <fred`> but also with titanium+root there were some apps which were not 'restoreable'
00:07:58 <fred`> last i remember was/is signal
00:08:28 <dazinism> yzrhjocizuwkjlqocf: the wiki page about iOS is at https://hub.libranet.de/wiki/graphene-os/wiki/Comparison-to-iOS
00:08:33 <fred`> so even when 'forcing' to backup it, apps seem be able to 'protect' from it
00:10:02 <yzrhjocizuwkjlqo> <dazinism "yzrhjocizuwkjlqocf: the wiki pag"> Thanks
00:10:24 <dazinism> yzrhjocizuwkjlII qocf  I didn't contribute to the iOS page. Think its based on a Reddit post by Daniel. Info may be a bit out of date now as all the operating systems have moved on a bit
00:16:07 <anupritaisno1> Hey Dylanger
00:16:29 <anupritaisno1> Can you please check your client? I do not know why you have ignored me
00:38:46 <strcat[m]> we'd appreciate help testing the Beta channel releases including the latest one
00:39:04 <strcat[m]> in particular it needs to be tested with captive portals (Wi-Fi networks requiring sign in, etc.)
01:33:07 <anupritaisno1[m]> fred`: titanium backup and root related apps belong in the OT chat
01:42:19 <fred`> thx for your advice anupritaisno1[m]
01:43:00 <fred`> the starting point was talking about seedvault
01:44:32 <fred`> and comparing their usecase/mechanism
01:45:10 <fred`> i could knew that it would lead into 'this' after starting the question aboud seedfault
01:45:16 <fred`> *couldnt knew
01:47:05 <ash[m]1> hi im sure this question is asked a lot so apologies in advance, the pixel 4a w/ 5g isn't supported with the standard 4a rom is it
01:47:38 <whatisthematrix[> Is there a way I can switch to the beta build of gOS without reflashing the phone?
01:48:05 <ash[m]1> rn i have a oneplus 6t running an aftermarket rom but really want to swap to grapheneos, the 4a + 5g has everything i want in a phone for cheap, so im considering getting that for a self christmas gift lol
01:54:38 <whatisthematrix[> @ash good question
01:55:02 <ash[m]1> haha ty
01:55:29 <ash[m]1> there are a lot of differences between the 5g and standard so i doubt itll work
01:55:34 <ash[m]1> at least not with the default firmware
01:55:47 <anupritaisno1[m]> fred`: anyway titanium backup doesn't do split apks
01:56:02 <anupritaisno1[m]> You'll need to install the app manually and then restore only data
02:44:04 <Lia[m]> <ash[m]1 "rn i have a oneplus 6t running a"> No GrapheneOS support yet, but up to you
02:44:43 <Lia[m]> No maintainer tho, so you'd be stuck on stock
03:12:07 <whatisthematrix[> Can I switch to the beta build of grapheneOS in the settings( to help out with the project ) without reflashing the phone?
03:12:24 <Lia[m]> <whatisthematrix[ "Can I switch to the beta build o"> You can
03:13:28 <whatisthematrix[> Oh okay I got it. Nice. What needs testing in the beta channel? I have the pixel 4a
03:15:44 <Lia[m]> <strcat[m] "in particular it needs to be tes"> (This)
03:19:38 <anupritaisno1[m]> Just be careful btw
03:19:41 <whatisthematrix[> I am not I follow what that means. Do you just want me to test if I can sign onto my WiFi, correc
03:19:53 <anupritaisno1[m]> Captive portals are going to be hard to test
03:19:58 <anupritaisno1[m]> whatisthematrix: no
03:20:09 <anupritaisno1[m]> It's more like signing in to McDonald's or airport WiFi
03:20:31 <anupritaisno1[m]> Or some shopping multiplex' public wifi
03:21:09 <anupritaisno1[m]> In my city there's government run WiFi on the street everywhere
03:21:20 <whatisthematrix[> I understand. I will test it out when I am next out and let you know.
03:21:20 <anupritaisno1[m]> I don't really use it but that also needs sign in
03:21:33 <anupritaisno1[m]> Also please be careful
03:21:39 <anupritaisno1[m]> There us a pandemic going around
03:21:46 <anupritaisno1[m]> * There is a pandemic going around
03:21:59 <whatisthematrix[> Agreed.
03:22:21 <anupritaisno1[m]> Please stay in your houses unless your area is relatively safe and even then follow all the safety measures if you do go outside to test it
03:33:41 <Lia[m]> <anupritaisno1[m] "Please stay in your houses unles"> Can't they just make a captive portal at their own router
03:33:48 <Lia[m]> But it needs a repeater
04:53:47 <Guest73406> Hey guys, i recently got the 4a and installed gOS immediately. Today something strange happened. While using the phone the screen froze then went dark. Now the display won't turn on. I can't restart the phone. Whenever I touch the fingerprint scanner the phone vibrates. Same thing happens when I press the power button
04:56:36 <SethGardner[m]> The buzz should b a sign that, if the display was working, the Shutdown/Restart buttons would be present.
04:56:36 <SethGardner[m]> If you hold the power button down for 10+ seconds, that should cause it to buzz again/buzz twice and power down completely.
04:56:36 <SethGardner[m]> Then you can try a hard restart.
04:56:53 <SethGardner[m]>  * The buzz when the power button was just pressed should b a sign that, if the display was working, the Shutdown/Restart buttons would be present.
04:56:53 <SethGardner[m]> If you hold the power button down for 10+ seconds, that should cause it to buzz again/buzz twice and power down completely.
04:56:53 <SethGardner[m]> Then you can try a hard restart.
05:00:07 <Guest73406> Still nothing. I'll try to hook it up to my pc to see if adb sees the phone later
05:00:30 <Guest73406> Ok, my alarm clock just went on ....
05:01:56 <Guest73406> Can this happen when the phones shut down, or does this mean it's still on?
05:02:21 <SethGardner[m]> It's still on. Power off = EVERYTHING is off, including the alarm.
05:05:02 <anupritaisno1[m]> Guest73406: sorry to know about this, please try force rebooting
05:05:16 <anupritaisno1[m]> Hold power + volume up for 10 seconds
05:07:32 <Guest73406> No, sadly still nothing. I noticed sometimes the power button doesn't cause the phone to buzz. But when
05:08:04 <Guest73406> When I touch the fingerprint scanner it becomes responsive again
05:14:23 <Guest73406> So when I hold the power button and volume key up for 10sec the buzzing on touching the fingerprint scanner or pressing the power button stops.
05:14:47 <Guest73406> Seems like the displays faulty :/ Thanks for your help anyways
05:18:56 <brenneke[m]> Is it all over now for Pixel 2 & XL or will they get any updates at all?
05:32:07 <anupritaisno1[m]> TheJollyRoger: algorithms are technically all breakable
05:33:02 <anupritaisno1[m]> You are better off making the argument that it doesn't make sense to threat model against an adversary with unlimited resources
05:33:54 <anupritaisno1[m]> Given infinite money and infinite time you can break sha2, sha3... anything.
05:35:01 * anupritaisno1[m] sent a long message:  < https://matrix.org/_matrix/media/r0/download/matrix.org/CBGIqniZuEUzNuYZQbCDsVCb/message.txt >
05:35:36 <TheJollyRoger> anupritaisno1[m]: Got it.
05:35:59 <TheJollyRoger> Thanks!
05:36:11 * anupritaisno1[m] sent a long message:  < https://matrix.org/_matrix/media/r0/download/matrix.org/gPFyTARhmneYUXEcGhMMZseu/message.txt >
05:36:32 <TheJollyRoger> Hey um... anupritaisno1[m], if I download the beta for Pixel 4, could I try to test the wifi captive portal detection? I now have my phone back.
05:36:44 <anupritaisno1[m]> TheJollyRoger: basically all encryption in the world is breakable
05:37:13 <anupritaisno1[m]> It's just that right now if you were to try you wouldn't have finished breaking it before the end of the universe
05:37:24 <TheJollyRoger> Yeah.
05:38:22 <anupritaisno1[m]> <snoodledoodle[m] "What you do is open up the .C fi"> Also TheJollyRoger this doesn't happen
05:38:34 <anupritaisno1[m]> You use getrandom()
05:39:03 <anupritaisno1[m]> Never read from /dev/*random unless you have a reason to
05:39:50 <TheJollyRoger> getrandom(), huh.
05:40:19 <anupritaisno1[m]> https://man7.org/linux/man-pages/man2/getrandom.2.html
05:40:35 * TheJollyRoger reads!
05:42:53 <anupritaisno1[m]> TheJollyRoger: ssize_t is basically size_t but supports a negative size
05:43:08 <anupritaisno1[m]> This is so that syscalls can return -1 on error
05:44:22 <TheJollyRoger> Huh, lots of stuff here.
05:50:40 <TheJollyRoger> It makes sense that something like this would be extremely sensitive and require very careful and precise programming though. I remember last time someone wanted to make a change to the way the kernel delivered randomness, the rest of the GPG team was not happy with it.
05:59:45 <fred`> https://grapheneos.org/build#building -> whats that 'm command' exactly?
06:00:36 <jenna546541[m]> Looks like make
06:00:37 <strcat[m]> it runs the build
06:00:49 <strcat[m]> it's not make
06:01:03 <fred`> i dont have a 'm' installed
06:01:05 <strcat[m]> it lets you run make but it just reroutes it through the actual build system
06:01:16 <strcat[m]> you need to follow the instructions to set up the environment
06:01:26 <strcat[m]> it's not a program
06:01:37 <strcat[m]> https://grapheneos.org/build#setting-up-the-os-build-environment
06:01:39 <fred`> (i thought i did)
06:01:40 <strcat[m]> if it's not working you didn't do that
06:01:54 <strcat[m]> it sets up the environment in the shell you source it
06:02:14 <fred`> ah
06:02:16 <fred`> ok
06:02:29 <JTL> fred`: `m` is part of the build enviroment. As long as you have the build enviroment configured properly, you will have `m` and all the "custom" commands in the guide
06:02:31 <JTL> Cheers
06:02:44 <fred`> thx
06:03:47 <strcat[m]> it's a wrapper to run soong
06:04:12 <strcat[m]> you can technically use `make` instead of `m` but it's a legacy compatibility wrapper
06:04:28 <strcat[m]> the build system uses soong and then handles all the remaining legacy makefiles by compiling them to ninja with kati
06:04:31 <strcat[m]> it doesn't use make for anything
06:05:05 <strcat[m]> https://paste.xinu.at/bOWmF
06:05:15 <strcat[m]> if you look at what it actually does it's just a set of wrappers to run soong for you
06:05:16 <anupritaisno1[m]> What is kati btw
06:05:26 <strcat[m]> kati compiles GNU makefiles to ninja
06:05:26 <anupritaisno1[m]> (asking about where the name came from)
06:05:30 <strcat[m]> a subset of the GNU make language
06:05:34 <JTL> thank you strcat
06:17:08 * brenneke[m] sent a long message:  < https://matrix.org/_matrix/media/r0/download/matrix.org/ZKUUlPCeifGscnlrfmWDuQjE/message.txt >
06:18:16 <strcat[m]> are you sure you're looking at the right folder? it has categories of files in addition to the actual directory
06:18:19 <strcat[m]> and the naming is similar
06:18:30 <strcat[m]> make sure to look in the entry named after the device
06:18:34 <strcat[m]> rather than the categories
06:18:49 <strcat[m]> it's possible the media store ignores that file for whatever reason so it doesn't consider it music category
06:23:48 * brenneke[m] uploaded an image: Screenshot_20201126-222333.png (29KiB) < https://matrix.org/_matrix/media/r0/download/matrix.org/ZzXZGaUpROiGVgNgMeUaLLnU/Screenshot_20201126-222333.png >
06:26:20 * brenneke[m] sent a long message:  < https://matrix.org/_matrix/media/r0/download/matrix.org/xeytlMMfLosrUKziDtrZIYcu/message.txt >
06:32:37 <strcat[m]> brenneke: that's normal
06:32:48 <strcat[m]> being tagged as a download is different than it being in the download directory
06:33:01 <strcat[m]> there's an internal structure and then there's the way stuff is categorized, they're separate things
06:33:32 <strcat[m]> it might be clearer if the default was just the profile's storage root
06:33:35 <strcat[m]> and the categories were a separate thing
06:33:51 <strcat[m]> I think the idea is that most people don't understand a FS tree and find things via categories
06:35:00 <strcat[m]> it's intended to work that way
06:36:30 <strcat[m]> brenneke: how did you put the file there? the answer to that is likely the answer to why it's not classified as a download
06:41:58 <brenneke[m]> <strcat[m] "brenneke: how did you put the fi"> Is storage path for torrent client.
06:43:28 <strcat[m]> brenneke: the torrent client is probably using the legacy storage API and not actually using a system API for performing a download (DownloadManager, etc.)
06:43:35 <strcat[m]> since it's not an HTTP(S) download
06:43:57 <strcat[m]> brenneke: it could be doing it in a way that has it classified as a download, but whatever it's doing isn't doing that
06:44:12 <strcat[m]> brenneke: putting it in the normal download directory isn't enough
06:45:24 <brenneke[m]> OK, got it handled now.
06:45:25 <brenneke[m]> Are Pixel 2 updates 100% over now?
06:45:30 <strcat[m]> no
06:45:46 <strcat[m]> we do them separately as an extended support release
06:46:13 <brenneke[m]> Thanks again.
06:53:13 <strcat[m]> brenneke: https://developer.android.com/reference/android/provider/MediaStore.Downloads
06:53:19 <strcat[m]> apps can add their files to this to make them considered downloads
06:53:27 <strcat[m]> the torrent client should be doing that
06:53:34 <strcat[m]> but they also probably don't use the modern storage APIs anyway
06:53:43 <strcat[m]> I bet they still use legacy storage access via the legacy storage permissions
06:54:20 <strcat[m]> brenneke: the way a torrent client should work is that it should ask you to choose a directory to have persistent access via the system file manager UI
06:54:28 <strcat[m]> and then it can save the downloads in that directory
06:54:45 <strcat[m]> brenneke: and then it can let you choose another location via the system file manager on a case-by-case basis
06:54:54 <strcat[m]> brenneke: no permissions required
06:55:16 <strcat[m]> brenneke: and then at some point, either when it starts or finishes downloading, it should mark it as a download
06:55:25 <strcat[m]> that's the way things are supposed to be done
06:56:05 <strcat[m]> I assume the way the app *actually* works is that it's an API < 29 app (or an API 29 app using legacy storage) and just asks for access to your profile's whole storage volume
06:56:29 <strcat[m]> and just writes stuff out to where you tell it, so the OS media store doesn't know about any of it as either downloads or more specific media types
06:58:24 <brenneke[m]> Torrent Client (Download torrent files) - https://f-droid.org/packages/com.github.axet.torrentclient
07:04:33 <strcat[m]> yeah, uses the legacy storage permissions
07:05:42 <strcat[m]> it could still mark them as downloads but it's typical that it doesn't do it yet
07:06:17 <strcat[m]> the Storage Access Framework for having the user select files via the system UI is from Android 4.4
07:06:22 <strcat[m]> Android 5.0 added directory support
07:06:50 <strcat[m]> Android 10 finally deprecated the legacy storage permissions for bulk access without user control
07:07:09 <strcat[m]> but API 29 (Android 10+) still allows opting into legacy storage support
07:07:14 <strcat[m]> API 30 (Android 11+) does not
07:07:51 <strcat[m]> brenneke: apps on the Play Store that are newly uploaded (either a new app, or an update to an existing one) must be API 29+ now, it won't be until around this time next year that 30+ is mandatory
07:07:59 <strcat[m]> unfortunately, F-Droid has no such standards for their official repository
07:08:37 <strcat[m]> and some apps avoid complying with these privacy and security improvements by not distributing via the Play Store
07:08:52 <strcat[m]> you'd think that F-Droid would have higher standards if anything, but it has none in this regard instead
07:33:21 <madd_hatter[m]> strcat: do not get me started on the lack of security or build standards at Fdroid.  Grrrrr. For being the most known open source repo.    I made the discission to stop using them some time ago.  Even though I do checks on all my downloaded apks prior and post install before running they just can not be trusted to follow basic standards.
07:34:27 <madd_hatter[m]> * strcat: do not get me started on the lack of security, builds, or standards at Fdroid.  Grrrrr. For being the most known open source repo.    I made the discission to stop using them some time ago.  Even though I do checks on all my downloaded apks prior and post install before running they just can not be trusted to follow basic standards.
07:41:52 <strcat[m]> it can potentially be improved but not much we can do about it atm
07:41:57 <strcat[m]> up to them to improve it
07:42:03 <strcat[m]> have voiced my opinions on various problems a lot already
07:44:33 <madd_hatter[m]> And that is why I stopped. Its one thing to miss stuff but when you are repeatedly made aware of real world issues and they go unaddressed for years.........at some point you have to cut bait.
08:02:37 <strcat[m]> working on fixing various recent regressions for Vanadium
08:02:42 <strcat[m]> browsers are a pain
08:03:14 <strcat[m]> autofill has become this over-engineered thing that has to be disabled by default
08:04:44 <TheJollyRoger> Oh wow.
08:04:47 <JTL> It scares me too
08:09:16 <strcat[m]> we used to disable it by default but this regressed relatively recently
08:09:20 <strcat[m]> and didn't have time to look into it til now
08:14:13 <Lia[m]> <strcat[m] "browsers are a pain"> Yeah, another bug: https://github.com/GrapheneOS/Vanadium/issues/84
08:15:00 * Lia[m] sent a long message:  < https://matrix.org/_matrix/media/r0/download/matrix.org/iKFqAPCBvWuPjCgjeOMYFifR/message.txt >
08:18:10 <strcat[m]> yeah going to make various Vanadium fixes
08:18:18 <strcat[m]> the omaha update disabling thing seems to have regressed
08:18:21 <strcat[m]> need to figure out that
08:18:24 <strcat[m]> then should be good again
08:18:26 <strcat[m]> it's a pain
08:18:49 <Coffee[m]1> Is Vanadium more secure than Bromite?
08:19:02 <strcat[m]> yes but offers fewer privacy enhancements / anti-fingerprinting
08:19:15 <strcat[m]> Vanadium and Bromite are our recommended browsers
08:20:26 <Coffee[m]1> Awesome. I cant wait to try it out. Gonna buy a Pixel 4a tomorrow and install Graphene for the first time
08:25:08 <TheJollyRoger> Awesome!
08:30:36 <madd_hatter[m]> strcat: wish those could be merged
08:31:04 <madd_hatter[m]> Maybe some day
08:31:59 <strcat[m]> we're gradually improving Vanadium, sometimes regressions happen from all the upstream churn though
08:48:30 <madd_hatter[m]> No worries
08:48:30 <madd_hatter[m]>   I always disable most every auto fill save type features anyways.
08:51:44 <strcat[m]> it's fixed for the next release now
08:52:15 <TheJollyRoger> Whew. Thank you strcat[m]!
08:53:30 <strcat[m]> upstream Chromium now defers to the OS for the main connectivity checks
08:53:36 <strcat[m]> but there are other connectivity checks it performs
08:53:57 <strcat[m]> I removed the current documentation on that because it's out-of-date, it no longer performs the main checks (defers to OS)
08:54:01 <strcat[m]> working on addressing the other stuff
08:55:19 <strcat[m]> probably going to end up doing another release
08:55:24 <strcat[m]> for November
08:55:28 <strcat[m]> and not pushing current to stable
08:55:42 <madd_hatter[m]> strcat: cranking out the work in the wee graveyard hours
08:55:42 <madd_hatter[m]> Much appreciated!
08:55:42 <strcat[m]> nothing really wrong with it just want to add some of these additional changes before the December update
08:55:55 <TheJollyRoger> Okay!
08:59:32 <LiquidSnake007> im looking for business plans/presentations for a web-based business of any sort... where can i find this? anyone know?
09:01:20 <TheJollyRoger> Hi LiquidSnake007, this is the GrapheneOS channel, I think you may have joined the wrong channel by mistake, we don't do web-based business here.
11:20:34 <dmctrl[m]> I noticed the install instructions don't require USB debugging to be turned on. Is that correct? I've seen other guides say you must have it on, but obviously I will follow the official one
11:24:44 <strcat[m]> yes, it's correct
11:25:01 <strcat[m]> dmctrl: we don't use adb as part of the instructions, instead we tell you how to boot to fastboot mode via a key combination (power + vol down)
11:25:36 <dmctrl[m]> Got it, thanks. Just bought a new Pixel, so I'll hopefully be installing GrapheneOS today :)
11:25:43 <strcat[m]> gets rid of various extra things that could go wrong in multiple ways
12:03:31 <Scott[m]3> <madd_hatter[m] "strcat: do not get me started on"> Sorry if you already mentioned it but what open source repo are you using instead?
12:03:43 <strcat[m]> we're going to make our own
12:03:45 <strcat[m]> for our needs
12:04:54 <strcat[m]> Scott: our OS update server has metadata like this https://releases.grapheneos.org/coral-beta and then that maps to the update zip file, and the update client can check to see if there's an incremental update from the version the device is on to the new release to get an efficient delta update
12:05:23 <strcat[m]> Scott: the update client verifies the signature of the update and verifies that the metadata inside the signed update matches (build date, device, etc.) to prevent downgrade attacks, etc.
12:05:37 <strcat[m]> Scott: what we plan to do is stick a tiny signify-style signature onto this kind of metadata
12:05:45 <strcat[m]> Scott: to verify the channel name
12:06:15 <anupritaisno1[m]> strcat: I already have that implemented
12:06:21 <anupritaisno1[m]> Signing the metadata itself
12:06:22 <strcat[m]> and then we can fork our update app into an app update system for out-of-band, automatic updates to apps
12:06:49 <strcat[m]> so it'll instead list out app ids and their version codes in a signed metadata file like that, with release channels
12:07:22 <strcat[m]> reuse the same kind of code for dealing with download resumption and checking for deltas (and pick something to generate and use the deltas)
12:07:41 <strcat[m]> so it will be designed to be minimal, highly robust and secure with very painless automatic updates
12:07:43 <strcat[m]> from the start
12:07:48 <strcat[m]> and delta update support for low bandwidth usage
12:08:13 <strcat[m]> and then we can add support for a simple list of apps that aren't installed but are available in the repo so you can install apps from the first party repo
12:09:05 <strcat[m]> and we'll provide official builds of microG, F-Droid, and Aurora Store there (and the OS will have support for making our microG signature appear to be the Play services signature - WITHOUT having to build microG into the OS or adding generic signature spoofing compromising OS security)
12:10:41 <anupritaisno1[m]> strcat: pm
12:46:18 <alzxjm[m]> GrapheneOS is so great, and getting better. These changes to updates are super exciting.
12:56:12 <Lia[m]> <alzxjm[m] "GrapheneOS is so great, and gett"> Agreed
13:06:34 <r0tt0r[m]> strcat are you able to use paysafe payment option somehow?
13:11:06 <strcat[m]> never heard of it
13:11:44 <r0tt0r[m]> its a german payment option where i exchange money against a code and you can then pay online with such code
13:43:41 <nscnt> It's the payment method underage German folks use to pay for their online video game accessoires without their parents knowing, basically. Nothing you need to know.
13:46:39 <r0tt0r[m]> well from my pov a quiet semi anon payment  option as long you cannot access cashier selling register/cam footage of gas stations
13:47:03 <anupritaisno1[m]> Sounds very interesting. Thanks for the heads up
13:47:40 <anupritaisno1[m]> Though I doubt r0tt0r is one of those people
13:48:28 <r0tt0r[m]> haha ye i have enough games despite i dont play anymore
15:35:26 <dmctrl[m]> Hi, I'm having some trouble with the final ./flash-all.sh command (Pixel 4 XL/Ubuntu 20.04). I get an error:
15:35:27 <dmctrl[m]> Sending sparse 'product_b' 1/2 FAILED (Error reading sparse file)
15:35:27 <dmctrl[m]> fastboot: error: Command failed
15:35:41 <dmctrl[m]> Is anyone able to help out? I have been following the official installation instructions
15:36:57 <dmctrl[m]> The bit before is 'Resizing 'product_b''
15:39:10 <anupritaisno1[m]> dmctrl: redownload
15:39:58 <dmctrl[m]> redownload what? The release?
15:41:50 <dmctrl[m]> Let me try it on Windows 10
15:43:44 <Joeri[m]> wait what os are you currently on?
15:44:37 <dmctrl[m]> I was using Ubuntu 20.04
15:46:46 <Joeri[m]> you could try it on windows. how did the android tools download go on ubuntu?
15:47:16 <dmctrl[m]> It was fine, clean download
15:47:24 <dmctrl[m]> Let me try it on Windows now and get back to you
15:54:07 <dmctrl[m]> hmm with windows I get stuck on <waiting for any device> when trying the flash
15:54:34 <dmctrl[m]> I tried restarting the bootloader but no luck
15:58:10 <dmctrl[m]> Do I need to install USB drivers for it?
16:01:25 <nscnt> dmctrl[m]: Have you updated your phone? We had an user yesterday with the same issue and it was solved by applying the latest Android update, according to his information.
16:02:21 <dmctrl[m]> yeah I made sure to fully update my phone before doing this
16:02:46 <obi[m]> Drivers
16:11:57 <dmctrl[m]> yep downloading the drivers recognised the device. Running flash now
16:15:02 <dmctrl[m]> It worked :) I see the GrapheneOS splash screen
16:15:04 <dmctrl[m]> Thanks for the help
16:16:06 <obi[m]> Awesome. Congrats. Enjoy
16:16:43 <nscnt> dmctrl[m]: What drivers did you download?
16:17:34 <dmctrl[m]> This: https://developer.android.com/studio/run/win-usb
16:18:54 <nscnt> This shouldn't be needed, though if I'm not mistaken.
16:19:24 <dmctrl[m]> Maybe you're right (as if it was needed, I would have expected it to be part of the instructions)
16:19:30 <dmctrl[m]> But it's the only thing that worked for me
16:20:09 <nscnt> Maybe installing it wasn't even the causation to get it to work?
16:20:34 <nscnt> Maybe you changed something else too in the process of installing it?
16:20:42 <dmctrl[m]> I think it was. As soon as I updated the driver with the downloaded one, fastboot devices picked up my device
16:21:00 <dmctrl[m]> No other changes
16:22:45 <obi[m]> Def it (for that issue with Windows anyway)
16:22:56 <nscnt> I'm not too much in to it. I will just keep it here and let e.g. strcat[m] decide whether this could be an actual solution to this problems which would be important if someone needs help in the future.
16:23:54 <dmctrl[m]> I'm not quite sure what the Ubuntu problem was though
16:23:59 <dmctrl[m]> Maybe a corrupted download
16:24:25 <obi[m]> It's a pretty basic problem when installing any custom rom on any device on windows. Ubuntu problem def sounds like a bad download
16:25:18 <strcat[m]> normal Windows 10 comes with the drivers
16:25:26 <nscnt> I didn't have the problem when I did it and it *shouldn't* be needed
16:26:16 <dmctrl[m]> Interesting, I don't think there's anything abnormal about my Windows machine
16:26:21 <nscnt> Is it Windows or OEMS of hardware?
16:26:45 <strcat[m]> Windows 10 comes with it
16:26:55 <strcat[m]> we only support the guide for the latest version of Windows 10
16:26:57 <strcat[m]> OS has to be up-to-date
16:27:25 <dmctrl[m]> It's fully up to date (it's even a Microsoft device)
16:27:31 <strcat[m]> it doesn't really make sense if 98% of people can do the install without installing drivers and 2% somehow can't
16:28:05 <dmctrl[m]> Yeah I agree, I think it's probably a me problem, but maybe worth adding in to the troubleshooting section if more than a few users start reporting it
16:28:16 <whatisthematrix[> Yeah, you definitely got to play around with it. My Linux laptop was not seeing the phone on certain USB ports and with \ without certain cables. I finally found a USB port and cable that worked and got it.
16:29:45 <whatisthematrix[> Not sure that I needed drivers but it does require a little patience and playing around especially if someone has not used fastboot or abd as was the case for me. Not grapheneOS fault just tech in general
16:31:14 <nscnt> I always get sceptical if someone mentions adb when installing GrapheneOS. It's nowhere mentioned officially. You don't need it.
16:31:53 <dmctrl[m]> I think they were just using it as an example, not that they used it for the install
16:32:02 <dmctrl[m]> but the same drivers would apply for adb
16:33:30 <nscnt> My point is: No one needs to understand adb. And actually, there are people in here mentioning it again and again when installing GrapheneOS
16:34:07 <nscnt> It just shows that there aren't following the official guidelines
16:34:11 <nscnt> *they
16:40:12 <obi[m]> Shame. You guys have some of the most simple, thorough install directions I have ever seen.
16:41:54 <dmctrl[m]> Yeah it's literally just copy & paste for the most part
16:48:43 <CaLaMaR2> odnam10[m] hola
16:49:11 <CaLaMaR2> https://raw.githubusercontent.com/louipc/grapheneos.org/irc/static/irc-rules.txt
17:45:37 <nopey2[m]> I was forwarded a message originated from strcat that I don't quiet understand so wanted to ask what it means here:
17:45:37 <nopey2[m]> > Instead of a generic signature spoofing permission breaking the permission model, we’ll be adding specific mappings from the app id + signing key to the Google signing keys, Our microG build will appear to have the Play services signature but will NOT be able to bypass signature checks in general
17:45:37 <nopey2[m]> Can you tell what other signature checks except of the one to appear to have the Play services signature can be bypassed with "traditional" signature spoofing (e.g. as implemented in LineageOS for microG or CalyxOS)?
17:45:46 <nopey2[m]>  * I was forwarded a message originated from strcat that I don't quiet understand so wanted to ask what it means here:
17:45:46 <nopey2[m]> > Instead of a generic signature spoofing permission breaking the permission model, we’ll be adding specific mappings from the app id + signing key to the Google signing keys, Our microG build will appear to have the Play services signature but will NOT be able to bypass signature checks in general
17:45:46 <nopey2[m]> Can you tell what other signature checks except of the one to appear to have the Play services signature can be bypassed with "traditional" signature spoofing (e.g. as implemented in LineageOS for microG or CalyxOS)?
17:46:30 <nopey2[m]>  * I was forwarded a message originated from strcat that I don't quiet understand so wanted to ask what it means here:
17:46:31 <nopey2[m]> > Instead of a generic signature spoofing permission breaking the permission model, we’ll be adding specific mappings from the app id + signing key to the Google signing keys, Our microG build will appear to have the Play services signature but will NOT be able to bypass signature checks in general
17:46:31 <nopey2[m]> Can you tell what other signature checks except of the one to appear to have the Play services signature can be bypassed with "traditional" signature spoofing (e.g. as implemented in LineageOS for microG or CalyxOS)? How is the signature spoofing in GrapheneOS different to CalyxOS?
17:48:59 <strcat[m]> GrapheneOS doesn't have signature spoofing
17:50:01 <strcat[m]> and it doesn't (and won't) integrate microG into the base OS as a privileged system app (or otherwise)
17:50:59 <strcat[m]> providing support for installing an insecure app in a secondary profile as a workaround is a lot different than building it into the OS and creating a permission that users are expected to grant to it for letting it bypass signature checks
17:51:02 <nopey2[m]> Sorry, not being precise here, I was talking about what is going to be added to support microG (which essentially seems to be signature spoofing, just that you don't use the name)
17:51:21 <strcat[m]> we aren't adding any support for bypassing arbitrary signature checks
17:51:29 <strcat[m]> or for arbitrary apps to bypass signature checks
17:51:31 <strcat[m]> we aren't doing that, ever
17:51:48 <nopey2[m]> OK, but isn't that the same most other custom ROMs do?
17:51:55 <strcat[m]> no
17:52:23 <strcat[m]> and further we aren't adding support for an arbitrary microG to pretend to be Play services
17:55:16 <nopey2[m]> But that's the same as CalyxOS, no?
18:00:37 <nopey2[m]> So I understand this "we restrict that only our version of microG can do it", but not
18:00:37 <nopey2[m]> - "signature spoofing permission breaking the permission model" - what permission model is broken with signature spoofing as its done in other ROMs?
18:00:37 <nopey2[m]> - "Our microG build will appear to have the Play services signature but will NOT be able to bypass signature checks in general" - how do you see the difference between "appear to have play services signature" and "bypass signature checks"? Isn't this appears to have play services signature exactly bypassing a signature check?
18:01:08 <nopey2[m]>  * So I understand this "we restrict that only our version of microG can do it", but not
18:01:08 <nopey2[m]> - "signature spoofing permission breaking the permission model" - what permission model is broken with signature spoofing as its done in other ROMs?
18:01:08 <nopey2[m]> - "Our microG build will appear to have the Play services signature but will NOT be able to bypass signature checks in general" - how do you see the difference between "appear to have play services signature" and "bypass signature checks"? Isn't this "appears to have play services signature" exactly bypassing a signature check?
18:02:11 <nopey2[m]>  * So I understand this "we restrict that only our version of microG can do it" (which means users are screwed when they want to build from source), but not
18:02:11 <nopey2[m]> - "signature spoofing permission breaking the permission model" - what permission model is broken with signature spoofing as its done in other ROMs?
18:02:11 <nopey2[m]> - "Our microG build will appear to have the Play services signature but will NOT be able to bypass signature checks in general" - how do you see the difference between "appear to have play services signature" and "bypass signature checks"? Isn't this "appears to have play services signature" exactly bypassing a signature check?
18:06:30 <nopey2[m]>  * So I understand this "we restrict that only our version of microG can do it" (which means users are screwed when they want to build from source), but not
18:06:30 <nopey2[m]> - "signature spoofing permission breaking the permission model" - what permission model is broken with signature spoofing as its done in other ROMs and is not broken with GrapheneOS?
18:06:30 <nopey2[m]> - "Our microG build will appear to have the Play services signature but will NOT be able to bypass signature checks in general" - how do you see the difference between "appear to have play services signature" and "bypass signature checks"? Isn't this "appears to have play services signature" exactly bypassing a signature check?
18:10:29 <nopey2[m]>  * So I understand this "we restrict that only our version of microG can do it" (which means users are screwed when they want to build from source, but those are probably not your target audience), but not
18:10:29 <nopey2[m]> - "signature spoofing permission breaking the permission model" - what permission model is broken with signature spoofing as its done in other ROMs and is not broken with GrapheneOS?
18:10:29 <nopey2[m]> - "Our microG build will appear to have the Play services signature but will NOT be able to bypass signature checks in general" - how do you see the difference between "appear to have play services signature" and "bypass signature checks"? Isn't this "appears to have play services signature" exactly bypassing a signature check?
18:11:04 <nopey2[m]>  * So I understand this "we restrict that only our version of microG can do it" (which means users are screwed when they want to build microG from source, but those are probably not your target audience), but not
18:11:04 <nopey2[m]> - "signature spoofing permission breaking the permission model" - what permission model is broken with signature spoofing as its done in other ROMs and is not broken with GrapheneOS?
18:11:04 <nopey2[m]> - "Our microG build will appear to have the Play services signature but will NOT be able to bypass signature checks in general" - how do you see the difference between "appear to have play services signature" and "bypass signature checks"? Isn't this "appears to have play services signature" exactly bypassing a signature check?
18:14:23 <strcat[m]> nopey2: nope, it's not the same
18:15:40 <strcat[m]> we won't have a signature spoofing permission, any generic signature spoofing, or the ability to use any third party microG releases
18:15:48 <strcat[m]> and we currently don't have support for it at all
18:16:28 <strcat[m]> nopey2: people can build GrapheneOS from source if they want to modify it
18:16:32 <strcat[m]> I'm not sure how they're "screwed"
18:16:55 <strcat[m]> if they didn't want a security-focused OS preserving the security model and caring about privacy and security, I don't see why they would be using it at all
18:35:07 <nopey2[m]> But CalyxOS bundles their microG build, you can't uninstall so you can't install a different one, same as what you say GrapheneOS is planning to have (except that CalyxOS comes preinstalled and it can be disabled whereas GrapheneOS comes without and you need to install it).
18:35:29 <nopey2[m]>  * But CalyxOS bundles their microG build, you can't uninstall so you can't install a different one, same as what you say GrapheneOS is planning to have - except that CalyxOS comes preinstalled and it can be disabled whereas GrapheneOS comes without and you need to install it.
18:35:59 <nopey2[m]> I'd assume that opt-in vs opt-out doesn't change anything about security.
18:37:52 <nopey2[m]> screwed maybe is the wrong word. Just saying that it's not very convenient to have to compile the whole OS from source when you want to have a specific app compiled from source.
18:39:14 <nopey2[m]> https://github.com/GrapheneOS/platform_frameworks_base/pull/50/files < is this the patch that you envision for GrapheneOS or is it something else?
18:41:37 <strcat[m]> CalyxOS bundles it as a system app with special privileges / whitelisting unavailable to regular apps
18:41:56 <strcat[m]> and the way CalyxOS bundles it is not what the microG upstream provides
18:42:05 <strcat[m]> so I'm unclear on what you're asking because you keep changing what you're talking about
18:45:33 <strcat[m]> if you want to talk about CalyxOS they have their own channel
18:45:33 <nopey2[m]> "upstream" does not provide an operating system, microG is just an app that requires the operating system todo something specific for it to work properly. I guess what you are doing is probably compatible with what microG requires otherwise it wouldn't work properly.
18:45:33 <nopey2[m]> Would you propose sounds like it's semantically same as taking the sample patch that microG provides, restrict it to the two package names microG uses and make the permission level signature instead of dangerous
18:45:40 <nopey2[m]>  * "upstream" does not provide an operating system, microG is just an app that requires the operating system to do something specific for it to work properly. I guess what you are doing is probably compatible with what microG requires otherwise it wouldn't work properly.
18:45:40 <nopey2[m]> Would you propose sounds like it's semantically same as taking the sample patch that microG provides, restrict it to the two package names microG uses and make the permission level signature instead of dangerous
18:45:53 <strcat[m]> microG provides patches for integrating, etc.
18:46:12 <strcat[m]> nopey2: no, that is absolutely not what I am talking about, that is a complete misrepresentation of it
18:47:02 <nopey2[m]> well you are proposing to remove the permission altogether and instead do a manual signature check which is not suggested by Google security team
18:47:15 <strcat[m]> and that PR you linked is not written by me and is not going to be merged as is
18:47:40 <strcat[m]> nopey2: no, it's not, and it's sounding like you're another person coming here to spread FUD about GrapheneOS and try to promote CalyxOS
18:48:03 <strcat[m]> nopey2: this is a common pattern, because CalyxOS and the community around it tries to promote itself by spreading misinformation about GrapheneOS
18:48:23 <strcat[m]> nopey2: CalyxOS has their own channel, I suggest talking about it there
18:49:13 <nopey2[m]> Sorry, I'm building my own rattlesnakeos and using a custom patch for microG compatibility. I was just wondering if there is anything I can do to make it more secure as I saw these announcements of GrapheneOS now adding support for microG using a custom patch as well.
18:49:39 <strcat[m]> off-topic for this channel
18:49:41 <strcat[m]> either way
18:50:31 <strcat[m]> and the patch that was proposed does not do what I described on Twitter or here
18:50:41 <strcat[m]> it is someone's proof of concept of integrating it, not mine
18:50:49 <strcat[m]> and as you can see it was not merged
18:51:06 <strcat[m]> it is not what I plan for us to do
18:51:11 <nopey2[m]> OK, sorry then, I thought "understanding why GrapheneOS is (going to be) doing somethin in a way that's more secure than others" is on-topic here. Will stop here, no problem.
18:51:30 <strcat[m]> it has been explained in detail what is planned
18:52:27 <strcat[m]> that proof of concept patch from someone is not really an implementation of it
18:52:37 <strcat[m]> it's in the wrong place for that
18:53:05 <strcat[m]> and what I described on Twitter is just how we are going to do things
18:53:10 <strcat[m]> I said nothing about how others do things
18:54:20 <nopey2[m]> well, I didn't understand from that explanation (nor did the random unrelated person that forwarded that statement) and I wrote my custom patch for rattlesnakeos, so I kind of have an idea how these thing works. I doubt any normal users will understand the difference from what you described on Twitter. Anyway. I feel my appearance here is not desired.
18:55:03 <strcat[m]> normal users are not definitely not expected to understand why we decide to take one low-level design approach over another
18:55:50 <whatisthematrix[> <nscnt "I always get sceptical if someon"> I was using adb as an example. I did not use it for my install. Why do you say you do not trust it?  I used adb to check and see that the pixel was connected not that I used it to install. If you research fastboot and using it, generally adb is going to pop up somewhere in people's example code. No one here was saying to use it over the official install guide, it just
18:55:50 <whatisthematrix[> has some useful commands to try and find out what is going on with a plugged in android device.
19:01:35 <strcat[m]> https://twitter.com/GrapheneOS/status/1331403599902076929
19:02:06 <strcat[m]> is the actual thread about the future plans for looking into supporting an optional Play services compatibility layer
19:02:16 <strcat[m]> with 2 different options
19:04:15 <strcat[m]> the precise implementation details are not determined yet but we are certainly not adding a way for an app to bypass any signature checks or for any app to pretend to be Play services
19:04:30 <strcat[m]> both important for different reasons
19:13:37 <nscnt> whatisthematrix[: Hey, I know you just took it as an example. In no way did I mean to insinuate anything. The "somewhere in people's example code" is the issue I see. People read something from a random post or similiar and trying to "hack" their way through and make things more complex than they are.
21:53:21 <userman23[m]> Is there an app (or preferably a native way to do this), that requires authentication before opening the app?
21:55:36 <Lia[m]> <strcat[m] "and that PR you linked is not wr"> Does the same applies for fingerprint PR?
21:58:42 <Lia[m]> Oh apologies for asking now, maybe on another time...
