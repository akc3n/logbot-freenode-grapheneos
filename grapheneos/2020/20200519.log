00:05:29 * TheJollyRoger sighs.
00:05:58 <TheJollyRoger> https://jollyrogers.ca/public/protobuf.txt <- I'm hitting this error on both Fedora and Gentoo trying to run android-prepare-vendor... anyone else figured this out?
00:07:18 <dazinism> >anything that you flash with different signature key boots to a red error screen.
00:07:54 <clathu[m]> https://protonvpn.com/blog/f-droid-download/
00:07:55 <clathu[m]> ProtonVPN is now available on F-Droid
00:08:53 <dazinism> xabierd thats interesting. You see the yellow screen with your OS and keys?
00:09:36 <dazinism> Possibly the OP5 verified boot, behaves better than the OP7pro
00:15:08 <dazinism> Ah yeah, looking at the details linked through from that page I just sent, OP5 does show a yellow screen.
00:59:32 <TheJollyRoger> Made one small step forward. onto the next issue.
01:04:51 <BrokenCog> what was blocking the download?
01:12:02 <TheJollyRoger> Python protobuf needs to be installed system-wide, rather than per-user it seems.
01:16:32 <BrokenCog> ahhh.
01:17:48 <TheJollyRoger> For some reason right now it's reporting that no space is left on 14GB of tmpfs or 450GB left on /. I'm kinda stumped.
01:19:19 <TheJollyRoger> I'm wondering now, does it seriously need more than 450GB of free space to extract the vendor firmware images or something...?
01:27:00 <renlord> no
01:27:05 <renlord> doesnt need that much space
01:27:10 <renlord> it uses tmpfs
01:27:21 <renlord> maybe you extracted multiple times?
01:27:26 <renlord> try cleaning up tmpfs
01:37:11 <ADL> https://youtu.be/UDPK9VuY19E
01:37:13 <ADL> https://youtu.be/UDPK9VuY19E
01:38:39 <TheJollyRoger> Okay!
01:44:32 <analog[m]> <madaidan[m] "image(2)-1-1-1-1.png"> cyredanthem this can't be true
01:47:27 <Shippwrecked[m]> It is
01:47:37 <cyredanthem[m]> I don't See the image
01:53:29 <madaidan[m]> <cyredanthem[m] "I don't See the image"> Neither do I but I assume it's the one where you admitted your undying love for Daniel
01:57:13 <madaidan[m]> Yep
01:57:18 <madaidan[m]> https://matrix.to/#/!omAJrepvwSfkXJrqbK:matrix.org/$158925079083772WMWYb:matrix.org
01:57:50 <madaidan[m]> Riot on android is so shit
01:58:15 <madaidan[m]> Had to view the message source to get the link of what you were replying to to see the image
01:58:18 <analog[m]> <madaidan[m] "https://matrix.to/#/!omAJrepvwSf"> I hate James Donaldson more than my own periods.
02:00:12 <madaidan[m]> <analog[m] "I hate James Donaldson more than"> I hate James Donaldson more than myself
02:00:36 <DannyWorkOrderPr> <cdesai "we're on #AOSPAlliance on freeno"> Fuck, I really need to get an IRC client.
02:01:43 <madaidan[m]> <DannyWorkOrderPr "Fuck, I really need to get an IR"> I recommend hexchat.
02:01:52 <madaidan[m]> Although I rarely use IRC.
02:18:32 <renlord> i use weehcat
02:20:24 <madaidan[m]> Wechat > Weechat
02:25:01 <renlord> i hope you were being sarcastic
02:25:11 <renlord> to a naive reader, it's not obvious
02:33:06 <madaidan[m]> <renlord "i hope you were being sarcastic"> I was lol
02:37:54 <cyredanthem[m]> Donaldson is so mentally challenged it's hard to hold a conversation with him
02:38:46 <madaidan[m]> <cyredanthem[m] "Donaldson is so mentally challen"> I did it before
02:38:52 <madaidan[m]> He called me a Karen :(
02:39:57 <DannyWorkOrderPr> Insults are an awesome way to avoid admitting you don't have a good response.
02:41:43 <cyredanthem[m]> He told me Daniel was a threat to the users. I said I understand so you would have deleted the keys to protect your users from this danger?
02:42:46 <cyredanthem[m]> He wouldn't say that. Daniel was in the same position Donaldson claimed to be in.
02:42:50 <cyredanthem[m]> Daniel did the right thing
02:42:52 <cyredanthem[m]> Case closed
02:45:23 <cyredanthem[m]> He could have gone to every device and swap their keys over. Which would have been the right thing to do if Daniel was so "untrustworthy". No he said that was too invasive on the users. The guy is so full of crap
02:46:29 <cyredanthem[m]> Donaldson is a selfish man through and through
02:47:30 <madaidan[m]> He's probably reading this rn
02:47:43 <madaidan[m]> He reads here a lot
02:49:01 <cyredanthem[m]> If he would like to message me and explain his case I'll give him the time of day. I used to use CopperheadOS. I tried not to make up my mind until I talked to him and I wasn't impressed with his doublespeak
02:51:03 <cyredanthem[m]> I highly doubt he would care enough. I didn't get that impression at all
03:14:15 <BrokenCog> so, once grapheneos has been installed the only thing needed before re-flashing stock android is the fastboot erase avb_custom.key described here: https://grapheneos.org/install#replacing-grapheneos-with-the-stock-os
03:14:19 <BrokenCog> or is there another step?
03:23:17 <rwarr627[m]> strcat: been studying hardened_malloc and want to make sure I'm beginning to understand. For small allocations, a single slab is created that is composed of slots, and for large allocations, a single region is created that is composed of slabs, not sure if that's correct?
03:26:05 <renlord> does aosp ship their own binutils?
03:26:12 <renlord> like ls, kill and stuff
05:29:28 <k3tan> renlord: you work with christian decker? wow
05:30:14 <renlord> when i visited ethz, yes
05:31:04 <renlord> i should have stayed for a full year, regrets.
05:34:43 <lvkm[m]> if i configure a vpn on my phone then make a hotspot for my laptop would that route the laptop all traffic trough the vpn?
05:35:36 <DannyWorkOrderPr> As long as you've configured it so all of your phone's traffic is going through VPN.
05:35:41 <dazinism> Danny@WorkOrderPro: in case you didnt know #freenode_#AOSPAlliance:matrix.org
05:36:16 <DannyWorkOrderPr> dazinism: Did not!! Cheers, friend.
05:36:31 <DannyWorkOrderPr> Dodged getting back on IRC yet again.
05:36:38 <dazinism> lol
05:39:56 <dazinism> Some rooms you'll get kicked if you arent using a nick thats registered on Freenode. You'll have to search to find out how to set that up if you need to
05:40:26 <renlord> matrix is really difficult to use
05:40:31 <renlord> just use IRC
05:41:01 <renlord> IRC is so easy, you can even use telnet
05:41:13 <renlord> if you refuse to use a proper IRC client
05:41:25 <renlord> just a bit more keystrokes
05:42:23 <DannyWorkOrderPr> <renlord "matrix is really difficult to us"> I am interested in hearing your experience, because I've not experienced too many issues (with public, unencrypted rooms, that is), unless you're counting Matrix.org test-server latency/downtime
05:42:59 <DannyWorkOrderPr> I historically have love for IRC, but, alas, getting others to use it on mobile to communicate with me 1:1 was impossible. hell, people won't even use XMPP
05:43:32 <renlord> on mobile, i'll admit that irc is unusable at all
05:43:59 <renlord> but more often than not, i realise that i'm ill-equiped to answer anyone on matters that are being discussed on irc with my mobile phone anyways
05:56:48 <JTL> renlord: Don't you need to send heartbeats over something when using telnet? :P
05:56:59 <JTL> or something*
05:57:31 <renlord> i've never held on to a irc connnection that long using telnet
05:57:35 <renlord> lol
05:57:40 <JTL> Me neither
05:57:49 <renlord> too many keystrokes
05:58:27 <JTL> >  Sometimes it is difficult for IRC servers to keep track of who is still connected. One trick they employ is to send PING commands to clients that have not exhibited any recent activity. The client is expected to respond with a PONG message to effectively say, "Hey, I'm still here!" If the client does not respond in a timely fashion, the server will close the connection
05:58:29 <JTL> Yup
06:01:57 <anonymous__> .
07:14:48 <strcat[m]> rwarr627 small allocations use slabs in a static region per size class with high entropy isolation, large is a separate system using dynamically mapped regions with random guards on each
07:17:00 <bwv988> -
07:17:19 <strcat[m]> rwarr627: large allocations aren't very interesting, it's essentially a totally separate system for both
07:17:39 <strcat[m]> rwarr627: it knows if an allocation is large if it's not within the gigantic (initially PROT_NONE) slab region
07:18:12 <strcat[m]> rwarr627: large allocations are just an extension to doing mmap directly and tracking the address + size in a hash table
07:18:56 <strcat[m]> it's a bit more complicated since it tracks address + size + guard size, with guard size randomly chosen as 1 page to a ratio of the allocation size depending on configuration (normally it'll use up to the size of the allocation for the random guards)
07:19:11 <strcat[m]> and then on free, rather than unmapping it, it puts large allocations in the region quarantine
07:19:32 <strcat[m]> which is a combination of random quarantine + queue-based quarantine like the other quarantine systems
07:19:56 <strcat[m]> it overwrites large allocations with a fresh PROT_NONE allocation on free
07:20:03 <strcat[m]> and then it's kept that way until it's pushed out of the quarantine
07:20:20 <strcat[m]> so large allocation creation is mmap of PROT_NONE region + mprotect of the usable non-guard inner portion
07:20:37 <strcat[m]> free is mmap with MAP_FIXED PROT_NONE to quarantine, then finally munmap eventually when pushed out of quarantine
07:20:48 <strcat[m]> but this applies to very few allocations - in the normal configuration, the largest slab size class is 128k bytes
07:20:54 <strcat[m]> only allocations larger than 128k bytes are large allocations
07:21:04 <strcat[m]> i.e. very few allocations work this way
07:21:41 <strcat[m]> this isn't really what hardened_malloc is all about and could be easily reused for a much different design
07:32:05 <lvkm[m]> can Mullvad vpn be configured straight from the settings without an additional app? i assume that the same needs to be done for each additional user. is there a risk of unrouted connection when switching users?
07:38:27 <lvkm[m]> sorry for the offtopic i asked because i saw it recommended here
07:46:57 <sadfea> Hi everyone, was hoping someone could help, installing on a pixel 2 xl (stable channel) via windows, when I run flash-all.bat, I get an error due to the following "fastboot: unknown option -- skip-reboot" when it comes to flashing the  last line of the .bat "fastboot -w --skip-reboot update image-taimen-2020.05.05.02.zip"
07:47:12 <sadfea> Is it ok to remove the skip-reboot flag or will it cause errors?
07:47:31 <strcat[m]> no it's not okay
07:47:41 <strcat[m]> sadfea: follow the instructions at https://grapheneos.org/install
07:47:56 <strcat[m]> sounds like you're following unofficial third party instructions using an out-of-date or third party fastboot
07:48:46 <sadfea> ok great, thought I would double check, I will look for a better fastboot.exe, this one must be old
07:50:40 <strcat[m]> just follow the instructions
07:50:49 <strcat[m]> don't look for one
07:52:14 <sadfea> Ok will do, was lazy and skipped the acquiring fastboot as I already had a version, but clearly not the right one haha
07:52:18 <sadfea> thanks for your help
08:05:50 <sadfea> Sorry guys, another error, I get much further now
08:05:52 <sadfea> archive does not contain 'vendor.sig'
08:05:52 <sadfea> Sending 'vendor_a' (349268 KB)                     FAILED (Write to device failed in SendBuffer() (Unknown error))
08:05:53 <sadfea> fastboot: error: Command failed
08:12:21 <dallemon[m]> sadfea: try again. or a different usb port. or flipping the cable.
08:13:59 <dazinism> Or a different cable
08:26:05 <sadfea> new cable did it, thanks very much everyone for your help
08:26:13 <sadfea> just doing first boot now
08:39:30 <strcat[m]> make sure to lock
14:49:32 <strcat[m]> anupritaisno1: that's not the verified boot rollback protection feature
15:52:10 <strcat[m]> anupritaisno1: verified boot rollback protection is a different thing from keymaster being bound to the version
15:52:18 <strcat[m]> and it sounds like they're binding keymaster to the version when the bootloader unlocked
15:52:47 <strcat[m]> downgrading is not really supported either way - this is just 2 different security features, not having them doesn't mean downgrading is fine
15:53:09 <strcat[m]> in general, downgrading software doesn't work well because the data gets migrated to new formats for the new version, and the new version has new formats / data
15:53:22 <strcat[m]> and it won't be able to handle that when it's downgraded
15:53:41 <strcat[m]> and you're meant to have the bootloader locked on a production device too
16:47:30 * hapssmak[m] sent a long message:  < https://matrix.org/_matrix/media/r0/download/matrix.org/LsAWRUTtNGCpZCReJaJRfXcU >
18:11:33 <DannyWorkOrderPr> hapssmak: Check your PMs, mate
18:44:21 <BrokenCog> hellos.  Could someone who has successfully done a second build with an existing successful ./out build please explain what is being described here: https://grapheneos.org/build#reproducible-builds
18:44:40 <BrokenCog> I succeed in a build, but there is no out/build_number.txt
18:44:51 <BrokenCog> and, what is it saying about the properties??
18:45:10 <BrokenCog> in the first parapgrah.
18:50:18 <strcat[m]> are you trying to do a reproducible build?
18:50:28 <strcat[m]> i.e. clear out/ and then reproduce the same build identically?
18:50:32 <strcat[m]> if not ignore the section
18:52:20 <BrokenCog> ah, so even after a successful previous build, out still needs to be removed?
19:40:54 <strcat[m]> BrokenCog: no it doesn't NEED to be removed
19:40:58 <strcat[m]> it's documented there
19:41:07 <strcat[m]> BrokenCog:  you're asking unrelated things
19:41:15 <strcat[m]> if you want to make a clean, production build you should remove out/
19:41:30 <strcat[m]> if you want to save lots of time and do an incremental build you should leave out/
19:41:53 <strcat[m]> reproducible builds are probably not relevant to you and are a different topic than this, just ignore that section
19:42:12 <strcat[m]>  * if you want to save lots of time and do an incremental build for development you should leave out/
19:42:56 <strcat[m]> generally there are 2 ways of making builds: clean builds (remove out) of the user variant, building target-files-package and then signing it with release keys
19:43:34 <strcat[m]> and the other common way is to do an incremental development build (only doing a clean build occasionally / as needed), with userdebug, not wasting time making target-files-package since it won't be signed
19:44:01 <strcat[m]> BrokenCog: I have no idea what you're trying to do, I can't give you advice beyond recommending that you read what I've written at https://grapheneos.org/build which does the best job it can explaining these things
19:45:31 <strcat[m]> if you aren't doing development, you have no reason to do an incremental build, you shouldn't use userdebug, and you should always be building target-files-package then signing it
19:46:01 <strcat[m]> if it's a device that's solely for development then don't bother with target-files-package / signing (unless working on something that needs it) and use userdebug
19:46:13 <strcat[m]> and for development , use incremental builds most of the time
19:46:18 <strcat[m]> it's not complicated and is explained there
19:47:08 <strcat[m]> the guide is written for developers and lays out the choices they have available rather than it being a minimal build guide for signed release builds for end users - not the intention of that page, end users should just use the official builds
19:53:13 <strcat[m]> BTW going to be rolling back a bunch of changes because of problems that need to be resolved
19:53:35 <strcat[m]> don't have time to narrow down the cause so a bunch of stuff is being rolled back including a couple things I merged from people
19:54:09 <strcat[m]> and next release will probably just be the monthly security update rather than doing one early as planned
19:54:53 <strcat[m]> unfortunately the lack of developers really hurts and I probably can't keep merging feature additions anymore without help doing the maintenance work
19:58:10 <BrokenCog> strcat[m]: do you get a lot of questions here related to the build# page?
19:58:34 <strcat[m]> get a lot of questions about a lot of things
19:59:43 <BrokenCog> you might consider it isn't as clearly written as you think it is:  most likeyl for the traditional reason that the writer doesn't have the same "eye" as a reader.  hence editors.  In this particular case, "reproducible" is being used in two different meanings without explaining them or the differences.
20:00:09 <BrokenCog> thanks for you explanation above, it doesn't sort out the parapgraphe, but it does clarify its intent.
20:01:17 <BrokenCog> I'd like to see the project succeed ... docs' which can be followed are part of success.
20:01:42 <strcat[m]> the document is for developers
20:02:26 <strcat[m]> reproducible is not being used in 'two different meanings'
20:02:46 <strcat[m]> there is a section on reproducible builds which can be ignored if you aren't trying to reproduce builds
20:03:19 <strcat[m]> if you want a minimal guide on building rather than a guide on development in general look elsewhere
20:04:04 <BrokenCog> this highlights my comment.  the reader who wants to re-do their build, will read the "reproducible" section.  They don't know from anything explained in the section that it's about something else (which I'm still not 100% clear on).
20:04:43 <BrokenCog> what does "reproducible" relate to?  that could be explained in the text.
20:04:54 <strcat[m]> 'redo their build' meaning what exactly
20:05:12 <strcat[m]> make a clean build of the same code? make a clean build of new code? make an incremental build of new code?
20:05:30 <strcat[m]> reproducible builds are only relevant if you're making a clean build of the SAME code and you want it to be identical to a previous build
20:05:36 <strcat[m]> that's what reproducible build means
20:06:11 <BrokenCog> if one is recompiling un-changed source code, the result will be the same.
20:06:13 <strcat[m]> I added information on reproducible builds to the guide so that people can do it rather than it just being in my head or private notes
20:06:41 <strcat[m]> BrokenCog: the result will be the same if you do what it says in that section, yes
20:07:09 <strcat[m]> i.e. setting the same build number and date
20:07:30 <strcat[m]> it's a guide on building GrapheneOS not development in general
20:07:46 <strcat[m]> i.e. the guide does not have to define basic terms
20:07:52 <BrokenCog> and, without those valuse, the the subsequent build would be different, but based off the same code, because of differences in the signed keys?
20:08:11 <strcat[m]> don't know why you're bringing up keys
20:09:08 <BrokenCog> trying to understand what your saying.
20:09:22 <BrokenCog> what is not a reproducible build?
20:09:55 <strcat[m]> if you build exactly the same sources from scratch but use a different build number / build id
20:10:01 <strcat[m]>  * if you build exactly the same sources from scratch but use a different build number / build date
20:10:33 <strcat[m]> so the build number / build date in the built code will be different
20:10:40 <strcat[m]> so as explained in that section those environment variables need to be set properly if you want to do a reproducible build
20:10:42 <BrokenCog> and the build number here being what?
20:10:52 <strcat[m]> the script is set up to make that easy
20:11:22 <strcat[m]> not within the scope of the guide to explain what reproducible builds are or what the build number / build date are
20:11:22 <BrokenCog> the branch tag build number?
20:12:21 <strcat[m]> if you build without setting build date / build number it will calculate them from the current time
20:12:46 <strcat[m]> that section documents how to do reproducible builds
20:13:18 <strcat[m]> if you aren't trying to reproduce a build bit-for-bit just ignore that section
20:13:37 <strcat[m]> it needs to be updated after the next release anyway
20:13:49 <strcat[m]> only BUILD_DATETIME_FROM_FILE needs to be set
20:14:16 <strcat[m]> alternatively I could just delete the section and let people figure it out for themselves since apparently it's counterproductive to explain things
20:15:05 <BrokenCog> right, so, what does bit-for-bit entail?  If I rm -rf out, I'll get the same result, but not the identical binary.  your calling reproducible "bit matching binary result", so I'm trying to understand the peices needed ... only the build number/date??  or anything else??
20:16:01 <strcat[m]> the section explains how to do reproducible builds
20:16:49 <BrokenCog> yes, you said that.
20:20:56 <BrokenCog> if I change a source file, what step would I start the /build# instructions ?
20:21:04 <BrokenCog> prehaps that's a more starightforward question?
20:21:28 <strcat[m]> to make a production build or to do development?
20:21:43 <strcat[m]> and did you keep the shell with the environment set up?
20:21:52 <BrokenCog> if we're changing source files, let's presume development.
20:21:53 <strcat[m]> I can't answer unclear questions
20:22:18 <strcat[m]> start at the top because I don't know if you kept the shell
20:22:39 <BrokenCog> okay, so without previous build shell vars, we start over.  if we DID keep them?
20:22:41 <strcat[m]> https://grapheneos.org/build#setting-up-the-os-build-environment if you didn't keep the shell
20:22:52 <strcat[m]> https://grapheneos.org/build#building if you did
20:23:17 <BrokenCog> okay.
20:23:25 <strcat[m]> it explains when you would want to remove out/ vs. not removing it
20:23:51 <strcat[m]> when in doubt remove it and do a whole clean build but usually for development you do incremental builds
20:24:03 <BrokenCog> except when not.
20:24:15 <BrokenCog> so, sometimes out needs to be removed, sometimes not?
20:24:43 <strcat[m]> if you are doing a production build you should always remove it
20:25:03 <strcat[m]> if you are doing development work up to you to decide when to do incremental builds
20:25:30 <strcat[m]> and either do a clean build or manually remove things if it's more complicated than just doing an incremental build
20:26:03 <BrokenCog> remove what things?
20:26:09 <strcat[m]> if you don't care about waiting hours for builds for minor changes and don't want to think then just do a clean build every time
20:27:08 <strcat[m]> vs. have 20 second builds
20:27:31 <strcat[m]> but with the caveat that you need to be careful and maybe work around leftover things
20:27:51 <strcat[m]> if you want foolproof don't use incremental builds
20:28:17 <strcat[m]> if you remove a file or move it, it's not generally going to remove the old one, etc.
20:29:21 <strcat[m]> same thing as some 5k line C project using a Makefile
20:29:38 <strcat[m]> if you remove a file the previous output is still going to be there unless you start fresh or remove it yourself
20:30:02 <strcat[m]> pretty normal occurrence for previous output being included causing problems
20:30:40 <strcat[m]> so as I said if you want foolproof and don't want to think about it and occasionally hit issues, use a clean build every time but you will not be able to do productive development that way
20:31:19 <strcat[m]> the build guide is absolutely not capable of covering the nuances of doing incremental builds, and it isn't specific to this project
20:31:30 <strcat[m]> it's not a general development guide
20:31:33 <strcat[m]> it's a GrapheneOS guide
20:31:35 <BrokenCog> okay, removing files is a manual fix-up-required case, agreed.  editing source files would be a more typical deverlopment cycle.  "there are cases where changes are not properly picked up by the build system" is refering to other cases as well?
20:32:20 <strcat[m]> it just requires thinking about what you're doing and learning
20:32:23 <strcat[m]> the guide can't cover this
20:34:01 <strcat[m]> if you're changing code running on the device only, not the build system, then incremental builds will work fine
20:34:13 <strcat[m]> if you're changing the build system then when in doubt do a clean build
20:35:02 <strcat[m]> i.e. if you're touching make / blueprint files don't assume an incremental build will work without thinking about it and maybe intervening
20:36:22 <BrokenCog> whoa, yeah, build tools wouldn't be part of typical development changes, no.
20:37:26 <strcat[m]> I mean it is pretty typical to need to change makefiles / blueprint files
20:38:04 <strcat[m]> it'd be a huge waste of time doing clean builds every time that's done but requires being aware of the fact meta changes like that may require manual intervention to avoid needing a clean build
20:38:54 <strcat[m]> like if you disable LOCAL_DEX_PREOPT for a module don't expect the build system to actually go and remove the stuff that generated when doing an incremental build
20:39:16 <strcat[m]> it won't align the output directory with a new makefile/blueprint setup
20:39:27 <strcat[m]> if you remove a module / file it won't go out of the way to remove the previous output
20:39:34 <strcat[m]> just an example
