00:33:40 <anupritaisno1[m]> 3991mft: boot to your recovery
00:33:44 <anupritaisno1[m]> Enter fastboot
00:57:54 <izymandias[m]> what will happen to Riot when Signal comes to desktop?
00:58:29 <JTL> Signal aleady has an (atrocious, feature incomplete) desktop client :P
00:58:43 <JTL> And at this point I'm not sure it will. Moxie has his own way with things
00:59:18 <JTL> I'm aware of a third-party desktop client under a differnet name avoid legal issues, but it's abandoned last I checked because only one developer, who is busy with job or whatever.
01:12:35 <M3991mft[m]> anupritaisno1,on my phone, in Fastboot mode (locked) I entered into Recovery Mode, which brought me back to Fastboot Mode. Is this what you meant?
01:20:20 <anupritaisno1[m]> Your recovery doesn't have an enter fastboot option?
01:22:40 <M3991mft[m]> Nope, it just goes black and then flips right back on into Fatboot mode
01:23:12 <strcat[m]> we're at 3k / 5k for matched donations via GitHub Sponsors
01:23:21 <strcat[m]> would be good to max that out, free $2k essentially
01:23:26 <M3991mft[m]> After it gives me a warning and option to pause because the device is loading a different operating system
01:23:33 <strcat[m]> think there are ~2-3 months left of GitHub matching donations
01:23:58 <strcat[m]> at the current rate ~1k will be left on the table
01:25:37 <strcat[m]> https://www.reddit.com/r/GrapheneOS/comments/g7xsx4/os_update_options_after_firmware_support_ends/fos8jwn/
01:27:40 <cclown[m]> 3991 -- confused..., so you get into fastboot, it States its locked, do you try to unlock?
01:28:21 <strcat[m]> ah maybe it's longer than 2-3 months
01:29:53 <M3991mft[m]> I did not try it unlocked, I'm assuming I should? I've just unlocked in fastboot mode now.
01:32:36 <M3991mft[m]> Just tried recovery mode with the device unlocked. I'm back in fastboot mode.
01:35:04 <M3991mft[m]> The last line "Enter reason: error booting boot.img"
01:37:46 <cclown[m]> The bootloader needs to be unlocked to flash
01:37:46 <cclown[m]> With it unlocked, you ran flashall and got that error?
01:38:26 <cclown[m]> Did you follow the tutorial bseeinu posted above?
01:41:43 <M3991mft[m]> I received the above error after putting the device into Recovery Mode. I did follow the tutorial above the first time I tried to install it. I've since tried iterating based on common issues that may be causing...I think I'm going to have to be more systematic about this. I will go back to the drawing board and see if I can't figure it out. Thank you all for your help!
01:42:22 <bseeinu[m]> I have to say that part of unlocking was a bit confusing. I only realized the order of the commands because I tried before. Maybe try to pay extra attention to the order of the steps" 3991mft
01:42:52 <M3991mft[m]> Will do, thank you again for your help
02:28:47 <TheJollyRoger> Heh. I just realized I could view my own ssh keys by appending ".keys" to my name on github. Now I have one of each, an rsa key, an ecdsa key, and an ed25519 key...
02:29:56 <TheJollyRoger> But they're all stored on tokens so I can't use age with them.
02:36:42 <TheJollyRoger> Well this has to change.
03:41:12 <zoraver[m]> On the latest release of GrapheneOS, chrome://version in Vanadium reports that Vanadium is 32-bit on my device
05:05:48 <gervarouge[m]> zoraver: I'm 81.0.4044.96Â (Official Build)Â (32-bit) on the beta
05:42:23 <zoraver[m]> My understanding is that Vanadium is built with `target_CPU = "arm64" `, so it is strange that it is reporting that it is 32-bit
05:48:43 <TheJollyRoger> Mine as well. I wonder if that's just because the patches for it forgot to update the name...?
05:48:47 <TheJollyRoger> It seems to work okay though.
07:38:16 <dazinism> SEL: the Mi A2 and A1 have verified boot on the stock OS. A2 had it with alternative OS on Oreo.
07:38:40 <dazinism> With the update to Pie it lost it...
07:40:08 <dazinism> Actually, I should say - I expect the A1 has it on stock.
07:41:24 <dazinism> Most Android devices need to have it on stock, so that Google will license Play to them
07:43:00 <TheJollyRoger> dazinism: aw crud, sad to hear they lost that, that's a real shame.
07:43:16 <dazinism> But we know that at least OnePlus has a terribly broken verified boot
07:44:13 <TheJollyRoger> Yeah, insane that they'd let arbitrary images pass validation without even verifying it.
07:44:41 <dazinism> TheJollyRoger: yeah especially considering all the work the Calyx crew did bringing up support
07:44:46 <TheJollyRoger> Yeah... :(
07:44:51 <TheJollyRoger> Cripes man, that's rough :(.
07:44:53 <TheJollyRoger> I'm sorry to hear it.
07:46:50 <TheJollyRoger> Ha. The irony hasn't been lost on me that in order to get away from Google's invasive services and software, I have to buy Google Hardware. But that kinda makes sense. Google seems to hire good people, and they seem to also take pride in their work. The other OEMs seem to just operate under the mentality of "You bought it, your problem now."
07:48:52 <dazinism> Theres also an exception for Android Go. These budget devices dont need verified boot to get a license for Play
07:49:19 <TheJollyRoger> Heh. I don't think I'd be very happy without my verified boot and remote attestation, though.
07:49:43 <TheJollyRoger> Kinda hard to go back now, all things in :()
07:49:45 <TheJollyRoger> *:(
07:55:09 <dazinism> If I followed the OnePlus chat properly, then the OP7pro verified boot does tie user data to the OS signature. So if you suddenly find you've lost all your data its a sign something *very bad* could be happening
07:55:48 <dazinism> *OnePlus chat that happened here recently
07:56:26 <shadowxz[m]> <dazinism "With the update to Pie it lost i"> Aww sad
07:57:03 <dazinism> But there was other real bad stuff about them
07:57:15 <shadowxz[m]> <dazinism "SEL: the Mi A2 and A1 have verif"> Nice I have the A1 on the stock ðŸ‘Œ
07:58:23 <dazinism> SEL: https://hub.libranet.de/wiki/and-priv-sec/wiki/verified-boot
07:58:23 <dazinism> The OnePlus section needs updating... I should do that.....
08:00:22 <shadowxz[m]> dazinism is this your site or do you contribute mainly?
08:00:31 <shadowxz[m]> Nice resources btw
08:38:00 <dazinism> SEL: yeah I set it up, currently all my work, but I'd welcome contributors.  Its hosted on Hubzilla. Need an account on any Hubzilla or Zap server to be able to contribute to the wiki
08:38:53 <cx2[m]> dazinism: pretty awesome work!
08:39:49 <dazinism> I've been doing some work setting up something similar for a GrapheneOS community webspace (wiki and files stash)
08:40:49 <cx2[m]> Just a note: I did peep the OP7TPro (Hotdog/g) link that you have and it redirects to the OP7Pro (Guacamole).... they are different phones. Unless the ROM works for both?
08:42:15 <dazinism> <cx2[m] "Just a note: I did peep the OP7T"> Oh. Guess thats a mistake. Think both should be OnePlus 7Tpro
08:42:53 <dazinism> ...or....
08:43:56 <cx2[m]> Among the 1.8million phones that I have... the OP7Tpro happens to be one of them and realllly want to do somethign with it...It's just too new I think for any official ROM...... and i'm not smart enouguh to do it myself
08:50:21 <dazinism> cx2: oh yeah should be OpenPlus7pro not 7Tpro
08:50:40 <gervarouge[m]> How do you have 1.8 billion phones and don't have a sane phone like an iPhone or Pixel
08:51:45 <cx2[m]> 1. Figure of speech.
08:51:45 <cx2[m]> 2. One could probably surmise that among those "1.8million" would be a few pixels and iphones.... and indeed there are.
08:52:40 <cx2[m]> gervarouge: kinda, sorta, maybe the reason i'm here?
08:54:12 <gervarouge[m]> You should sell your phones and buy a Pixel or iPhone
08:54:47 <gervarouge[m]> They amazing if you've never used them
08:55:13 <cx2[m]> wut.
08:55:37 <dazinism> cx2: you should chat to anupritaisno1 - they are the lead dev of GlassRom and may well know more about OnePlus than anyone else who doesnt work for OnePlus
08:56:49 <cx2[m]> Yeah I've been talking with him.... going to use one of mine as a sacrificial lamb since the a GOS handset is my daily
08:57:43 <dazinism> sacrificial lamb for?
09:01:24 <cx2[m]> For GlassROM. the OP7Tpro is relatively new and GlassROM is new. A lot could go wrong
09:02:15 <dazinism> Oh, I see nice.
09:02:31 <cx2[m]> gervarouge: phones.....
09:02:42 * cx2[m] uploaded an image: phones.jpg (452KB) < https://matrix.org/_matrix/media/r0/download/matrix.org/RRomdSwhxsnEgGrjditQAGFv >
09:04:41 <cx2[m]> gervarouge: since it apparent'y wasn't clear that I do at least have one of each, OP7t, iPhone, and Pixel
09:05:19 <shadowxz[m]> Damn nice collection
09:07:08 <cx2[m]> Thanks... less about showing off.. more about answering gervarouges question about why i "dont have a sane phone like an iphone or a pixel"
09:07:34 <dazinism> cx2: what are the other 1,799,997 phones?
09:07:52 <cx2[m]> hahaha
09:08:07 <shadowxz[m]> <dazinism "cx2: what are the other 1,799,99"> Nokia 3310s
09:08:11 <dazinism> pic or they didnt happen
09:08:17 <cx2[m]> ok... mayyyybe that's a bit of a stretch. BUT there are definitely more pixels in there..
09:08:49 <gervarouge[m]> Huh not bad
09:09:03 <gervarouge[m]> Okay do keep in mind OnePlus is one of the worst at security
09:09:13 <gervarouge[m]> It's hard to impossible to fix that
09:09:33 <gervarouge[m]> Terrible SELinux rules
09:09:58 <gervarouge[m]> Medicore updates
09:10:25 <cx2[m]> gervarouge Well aware of this fact...but they sure are pretty to look at.
09:10:38 <gervarouge[m]> Haha so are iPhones
09:11:02 <cx2[m]> gervarouge: in all seriousness, I bought it purely to play with.... and they really do look pretty great. but it would never be a phone that I would actually use.
09:11:41 <cx2[m]> youll notice none of them have a sim, in fact, none of my phones have a sim.
09:12:29 <gervarouge[m]> That's awesome I'm the same way
09:12:35 <gervarouge[m]> No sim
09:13:44 <cx2[m]> I am pretty stoked to see what anupritaisno1 has in store with GlassROM though.... pretty stoked about that.
09:16:15 <dazinism> Yeah, they look to be doing a load of solid work.
09:17:00 <dazinism> Pity OnePlus apparently dont care much for security
09:18:47 <dazinism> Shame anu doesnt have/work on Pixel/Graphene
09:20:08 <nscnt> cx2[m]: Re: None of your phones have a sim. What's your use case? Only over Wi-Fi? Just using services that require no phone number? Or...?
09:20:50 <gervarouge[m]> What's GlassROM?
09:23:41 <cx2[m]> nscntyeah wifi only. I do have a sim that I could use if necessary.... but it hasn't been necessary for quite some time.
09:29:21 <nscnt> cx2[m]: Do you get a phone number otherwise? Like virtual or don't you use common messengers (WhatsApp/Signal/...)  that require a phone number?
09:30:22 <nscnt> Well, you could have used your sim once to register. How do you do it?
09:32:19 <cx2[m]> Yeah I have a service that I use. Relatively inexpensive... I can burn numbers for really cheap ~$1.00 USD. Or I can keep it perminently if i woudl like.... so I have one that I use for family / friends. one for work.... then the others I use and burn as required. i.e. grocery stores, department stores, etc.
09:34:00 <cx2[m]> keep in mind, my "threat" is Google, Amazon, et. al. But I take it a lot further for both work, and as a hobby.
09:34:45 <cx2[m]> I can use those numbers to register if necessary (SIgnal / Whatsapp), and they work just fine, and all without a SIM
09:34:52 <nscnt> Like... The reason why I use a mobile phone is to be... mobile. Do you rarely use your phone and you're fine with only having a connection at some point or do you have wi-fi hotspots everywhere?
09:37:08 <gervarouge[m]> The reason to use mobile is the better security
09:37:10 <gervarouge[m]> That's what I use it for
09:37:31 <gervarouge[m]> If there was better sandboxing on Mac or better privacy on ChromeOS I'd use it
09:37:33 <gervarouge[m]> Right now mobile is the only secure option for me
09:37:47 <cx2[m]> I use a wifi hotspot when not at home.
09:38:32 <cx2[m]> But even then it's not entirely necessary given that wifi is everywhere these days
09:39:05 <gervarouge[m]> Yeah true
09:39:27 <nscnt> It's not really usable where I live when I'm out.
09:39:28 <gervarouge[m]> I love GrapheneOS, but I'm probably going to switch to an iPhone so I can use an iPad as my laptop with less attack surface
09:40:16 <gervarouge[m]> I'd really miss my Pixel
09:40:46 <cx2[m]> nscnt: a hotspot?
09:41:43 <nscnt> cx2[m]: Yea, the infrastructure for open wi-fi isn't too good.
09:42:36 <nscnt> And I don't like the inconvenience if you need to "log in" to use it.
09:43:02 <miniblue[m]> Fuck yeah I finally got Qubes to work. It took me two days but I did it. That is all.
09:43:22 <miniblue[m]> Carry on, everyone.
09:44:23 <cx2[m]> <miniblue[m] "Carry on, everyone."> well, already said
09:45:03 <gervarouge[m]> Congrats you know have an OS with terribly insecure packaging and guests. Good luck miniblue
09:45:08 <gervarouge[m]> I'm kidding, mostly
09:45:09 <cx2[m]> nscnt: yeah inevitably there are going to be places that I don't have service. I have just found that it largely doesn't happen anymore. Living in a large city tends to help that.
09:45:23 <gervarouge[m]> ðŸ¤ª
09:45:29 <gervarouge[m]> In all seriousness, desktop security is abysmal
09:45:41 <nscnt> cx2[m]: Sure, that helps.
09:47:36 <miniblue[m]> Oh I know. But it's more secure than *whispers* Linux Mint.
09:48:52 <gervarouge[m]> Yes very
09:48:55 <gervarouge[m]> macOS and ChromeOS are the only better options I think
09:49:14 <joshman[m]> QubesOS is no Panacea. And it is difficult to use as a daily driver desktop. At least for my usecase
09:49:17 <gervarouge[m]> One is expensive and the other spys
09:49:47 <joshman[m]> Macos/Chrome OS is privacy gone
09:49:53 <gervarouge[m]> Qubes is really good at the one thing it does well
09:50:10 <cx2[m]> yeahhhh.... i'll pay the extra dollars upfront for their privacy policy.
09:50:12 <gervarouge[m]> <joshman[m] "Macos/Chrome OS is privacy gone "> macOS doesn't spy on you. MITM it
09:50:36 <gervarouge[m]> Telemetry question on the setup page is all you need to change
09:50:40 <joshman[m]> The best option is use whatever you like but do sensitive stuff on your GrapheneOS
09:50:49 <gervarouge[m]> And avoid iCloud
09:51:00 <joshman[m]> <gervarouge[m] "macOS doesn't spy on you. MITM i"> Did you review code?
09:51:13 <gervarouge[m]> Defyingly
09:51:30 <cx2[m]> I do pulls.... and sure, anyone can use the "do you really believe them?" mantra.... but regarding macOS / iPadOS.... to this point they have proven that they are collecting what they say they are, and not collecting what they say they don't.
09:51:33 <gervarouge[m]> * Definitely
09:51:54 <gervarouge[m]> <joshman[m] "Did you review code?"> Do you review the 50 million lines of code in GrapheneOS by Google?
09:52:03 <cx2[m]> at least for me.
09:53:28 <gervarouge[m]> No one can audit such big things like OSs and Browsers. Apple at least opens their kernel, browser engine, and some programming things
09:53:31 <gervarouge[m]> Not perfect, but Apple makes money off overpriced and restricted repair items
09:53:43 <gervarouge[m]> That's the least sketchy way to make money you see on most hardware
09:53:49 <joshman[m]> <cx2[m] "I do pulls.... and sure, anyone "> Information of Hundreds of latest model iPhones have been available for law enforcement in many stated including TX, AZ, Israel and others
09:54:43 <cx2[m]> yeahhhhh.... law enforcement isn't a threat to me.
09:54:49 <joshman[m]> I haven't seen any criminal case where a graphene os device was provided with all files available for LEA
09:55:16 <gervarouge[m]> If you use a 4 digit PIN with no reset after fail their going to get in
09:55:31 <joshman[m]> Law Enforcement is not different than criminals. They just stand on opposite sides
09:55:31 <cx2[m]> *a threat FOR me
09:55:35 <gervarouge[m]> Criminals are dumb
09:55:41 <gervarouge[m]> I'm not a criminal so I'm not worried
09:55:53 <joshman[m]> Criminals are richer than law
09:56:10 <gervarouge[m]> <joshman[m] "I haven't seen any criminal case"> No one uses Pixels much less GrapheneOS. Security through obscurity?
09:56:23 <joshman[m]> They can buy penetration devices including those illegal ones as opposed to law
09:56:34 <joshman[m]> <gervarouge[m] "No one uses Pixels much less Gra"> Yes. And this is what I prefer
09:56:45 <cx2[m]> josh.man: criminals are richer than law? what does that even mean?
09:56:51 <gervarouge[m]> Whatever floats your boat
09:56:51 <miniblue[m]> I trust Graphene and Daniel Micay more than I trust Apple but I still think Apple is the least worst of the Big Five.
09:57:12 <dazinism> Folks her with iOS experience discussed here previously a bit about Apple sucking up data unexpectedly
09:57:30 <dazinism> * Folks here
09:57:37 <gervarouge[m]> <miniblue[m] "I trust Graphene and Daniel Mica"> Definitely
09:58:00 <gervarouge[m]> Trust Apple more than Qualcomm and Google which is where Graphene vs Apple becomes a hard choice
09:58:18 <dazinism> Was possibly 'user error ' but there were a few people reporting different things
09:58:24 <joshman[m]> <cx2[m] "josh.man: criminals are richer t"> As in unlimited budget. If needed
09:58:46 <cx2[m]> dazinism: I have heard that as well.... and again, you can request reports from apple on a per AppleID basis
09:58:58 <dazinism> Appears you have to be very careful not to end up sending all your data to iCloud
09:59:31 <miniblue[m]> Oh yeah iCloud is a data privacy nightmare
09:59:47 <miniblue[m]> And security, technically, I guess
09:59:54 <dazinism> >I also immediately disabled iCloud syncing and then after 6 months, first time logging into iCloud, found out that everything was backed up anyway.
10:00:01 <gervarouge[m]> * I trust Apple more than Qualcomm and Google which is where Graphene vs Apple becomes a hard choice
10:00:07 <gervarouge[m]> I trust Graphene the most
10:00:07 <cx2[m]> josh.man: I'm not sure which country you're from, but unless it's run by a criminal organization itself, I'm not sure where you're getting youre data.
10:00:10 <gervarouge[m]> It's pretty even I guess
10:00:20 <gervarouge[m]> <dazinism "Appears you have to be very care"> No shit
10:01:30 <miniblue[m]> Just don't trust anything and throw your phone into a river. Problem solved!
10:02:20 <miniblue[m]> Oh and desktop. Unless you smelt it yourself using FLOSS sand.
10:02:32 <dazinism> I wouldnt like the feeling that my OS was constantly trying to slurp all my data.
10:02:39 <miniblue[m]> Even then you gotta trust the sand. It never ends. :P
10:03:38 <dazinism> Effectively trying to trick me against my wishes
10:04:15 <miniblue[m]> Hence why I, personally, much more comfortable with Graphene. If only out of principle.
10:04:31 <dazinism> This
10:04:58 <gervarouge[m]> iPhones have more offline features than any other phones
10:05:00 <gervarouge[m]> <dazinism ">I also immediately disabled iCl"> I'd complain about that to Apple and the news. Apple got embarrassed with the Safari leaks and made the greatest jump in OS security and privacy possibly ever seen
10:05:27 <gervarouge[m]> Not defending them I don't even like Apple, they do invest in the right places though
10:05:39 <cx2[m]> Again, in my case as long as my os isn't trying to sell off my information, get after it.... i'm still goign to exhaust as many measures as possible to mitigate that.
10:05:39 <cx2[m]> All of that said, I don't generally make conveneince moves, however, if what I am doing on a day to day basis is inconvenient, it's not worth it to me. Time being the most valuable resource one has, I'm not about to waste it, attempting to plug EVERY hole..... just the big ones.
10:06:07 <nscnt> 80/20
10:06:45 <nscnt> Pareto principle
10:07:33 <cx2[m]> I will say it's a pretty good feeling knowing that it's reasonable to order things from amazon and apple with relative anonymity if you get a process down.
10:07:58 <cx2[m]> though amazon makes it a bit of a pain in the ass...
10:08:29 <gervarouge[m]> Amazon is a pain in general
11:18:47 <rawmind> Hi guys!
11:19:13 <rawmind> Where can I find some grapheneos wallpper for my new Pixel3a ?
11:20:49 <yekip[m]> ?
11:20:56 <yekip[m]> what is grapheneos wallpaper?
11:20:59 <yekip[m]> you just need wallpaper. hardware store is a good bet :D
11:21:17 <rawmind> a wallpaper
11:21:45 <rawmind> with grapheneos elements as logo, etc..
11:22:20 <rawmind> https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.gitmemory.com%2Fissue%2FGrapheneOS%2Fchromium_patches%2F9%2F491607273&psig=AOvVaw1RCKfsNADjhqLbyTviLW_k&ust=1588159323968000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCOD2lNmAi-kCFQAAAAAdAAAAABAN
11:22:27 <yekip[m]> no idea what you mean. if you want a pretty picture, take one with the awesome OpenCamera app
11:22:34 <yekip[m]> aah, you want graphene logo. i see
11:22:43 <yekip[m]> make one
11:22:52 <yekip[m]> https://duckduckgo.com/?t=ffab&q=grapheneOS&iax=images&ia=images
11:23:25 <yekip[m]> https://grapheneos.org/opengraph.png
11:25:33 <rawmind> yes I mean a pretty picture with the grapheneos logo and some cibersecurity picture..
11:31:03 <renlord> if you tap to focus using open camera, does that mess up PVC usage/
11:43:15 <izymandias[m]> which is the most secure desktop OS?
11:44:16 <renlord> none
12:38:40 <limitless0[m]> Anyone uses launchers,are they privacy or security risk?
12:41:03 <izymandias[m]> not even linux?
12:48:49 * nscnt giggles
12:57:17 <nscnt> limitless0[m]: I don't use a launcher other than the stock one, because I don't need it. No other question needed to answer for myself.
12:57:25 <Zenithium[m]> <izymandias[m] "not even linux?"> Linux is the worst when it comes to security
12:58:21 <nscnt> limitless0[m]: Sure, the could be a risk. There's this KISS launcher that learns which apps you search most for (locally, I think). But if that would be sent home, that could be a kind of privacy violation.
12:58:33 <nscnt> *there could
13:02:29 <emersion> it's open-source, so
13:02:45 <emersion> not hard to check for yourself
13:02:47 <nscnt> =]
13:08:30 <nscnt> emersion: could you plz read some of it and share ur conclusion plz?
13:10:22 <nscnt> plz it's not hard i guess
13:13:02 <emersion> well, to begin with, the launcher doesn't have internet access https://github.com/Neamar/KISS/blob/master/app/src/main/AndroidManifest.xml
13:13:26 <nscnt> I don't care about it.
13:13:31 <nscnt> I just gave an example.
13:14:49 <nscnt> There's always a risk, just to what extent?
13:17:06 <nscnt> On GrapheneOS you could just turn off the network permission. But as I said, it was just an example.
13:19:13 <nscnt> emersion: And your statement about "it's open source, just check it" is a reucurring thing that's just wrong. I don't even know where start, so I don't try to start anything.
13:19:24 <nscnt> huh
13:24:38 <joshman[m]> Ok. Always wanted to discuss this. I know DM doesn't like email and I totally agree. Technology is archaic. So,  I did some research and find Criptext is a very ok project which is kinda Signal copycat but for sending emails mostly. Fast, easy to use. Anyone can drop a word about it?
13:27:30 <joshman[m]> * Ok. Always wanted to discuss this. I know DM doesn't like email and I totally agree. Technology is archaic. So,  I did some research and find Criptext is a very ok project which is kinda Signal copycat but for sending emails mostly. Fast, easy to use. Five cents, anyone?
13:30:37 <nscnt> Email consists of several standards which define what email is. These standards are old and flawed when considering the values of privacy/security. I don't know about the project, but I don't know if that's email anymore.
13:37:01 <bseeinu[m]> Is there any way to do a full system backup, like if it was a raspberry pi kinda, so I can restore the full image of my phone? Not Seedvault or partial solutions
13:39:32 <cdesai> nope
13:40:31 <nscnt> joshman[m]: "All emails sent to non-Criptext addresses (Eg. Gmail, Yahoo, Outlook) are sent as normal, unencrypted emails." That's just meh
13:41:14 <secluseian> quick question is there any issues with installing GOS on a pixel 3a initially running android 10 which was purchased from google?
13:41:44 <nscnt> secluseian: No
13:42:43 <nscnt> secluseian: Why do you think it should? Am I missing something? Pixel 3a, fine. Android 10, fine. Purchased from Google clarifies that it's not carrier locked, fine.
13:43:21 <renor[m]> <secluseian "quick question is there any issu"> No, why would there be any problem? That's the only way to get GOS on a Pixel, all run Android when purchased
13:43:49 <secluseian> tried to install last night and everything seemed to install following the instructions, but when it rebooted, it just rebooted into the stock android it came with.
13:44:08 <nscnt> secluseian: Than you must have made a mistake.
13:44:10 <nscnt> *Then
13:44:41 <nscnt> secluseian: Be sure to follow the official guide.
13:45:27 <secluseian> i'm following that, along with the installation guide vid at https://invidio.us/watch?v=gQkb0OAOXoc
13:47:45 <nscnt> I've never watched it.
13:48:02 <secluseian> this is the screen i'm seeing before I reboot after flashing. is is correct?
13:48:03 <secluseian> https://media.discordapp.net/attachments/645680642704670720/704690132640596068/IMG_20200428_084616.jpg?width=508&height=677
13:48:03 <nscnt> It recommends downloading fastboot from some xda page, idk
13:48:34 <secluseian> i'm not using the portable version
13:49:35 <nscnt> Has been a while since I did it the last time. Not sure. I may just recommend following the official instructions.
13:52:24 <secluseian> guess i'll recheck my adb source then
13:52:41 <secluseian> it failed to install somehow again
13:54:10 <secluseian> i'm using windows though
13:57:09 <nscnt> secluseian: You got the  Platform Tools from https://developer.android.com/studio/releases/platform-tools ?
13:57:20 <secluseian> yes
13:58:24 <nscnt> secluseian: The tools work, but the installation... gives an error or?
13:59:16 <secluseian> doesnt seem to. let me run the flash again and i'll take a pic at the end of the flashing process
13:59:18 <cclown[m]> Did you unlock the bootloader before, flash and then lock it after and then take the screenshot?
13:59:18 <cclown[m]> Screenshot says its.locked
13:59:39 <izymandias[m]> <Zenithium[m] "Linux is the worst when it comes"> really? is there proof of this?
14:00:15 <izymandias[m]> are there any reddit threads of daniel talking about linux security?
14:02:18 <secluseian> yes, i've been following the official instructions. that vid just really gives an explanation to it, but i've been using the GOS installation page.
14:03:05 <secluseian> that screen shot was just before I rebooted after relocking
14:06:48 <Zenithium[m]> <izymandias[m] "are there any reddit threads of "> Lots, here are some https://www.reddit.com/r/GrapheneOS/comments/du23la/rooted_or_root/fludhpx?context=3 https://www.reddit.com/r/GrapheneOS/comments/fwm4d2/why_try_to_make_a_phone_secure/
14:07:36 <Zenithium[m]> izymandias: You can just use https://redditcommentsearch.com/ and fill in username DanielMicay and search linux or whatever you're curious about
14:07:53 <nscnt> secluseian: I don't know how to help other than probably just checking all the steps included in the official guide. ^^
14:09:22 <nscnt> secluseian: You used sargo-factory-2020.04.14.23.zip?
14:10:04 <secluseian> yes, from the GOS releases page
14:11:33 <nscnt> You must have missed something in the instructions then, idk. ^^ Just start from the very beginning.
14:13:11 <secluseian> bootloader unlocked
14:13:13 <secluseian> https://cdn.discordapp.com/attachments/645680642704670720/704696638068752434/IMG_20200428_091236.jpg
14:16:35 <madaidan[m]> <gervarouge[m] "What's GlassROM?"> LineageOS with some of the insecure stuff removed and most of the GrapheneOS patchset applied
14:17:18 <madaidan[m]> <izymandias[m] "which is the most secure desktop"> The standard desktop security model is completely broken.
14:18:45 <secluseian> this is where i'm at now
14:18:46 <secluseian> https://cdn.discordapp.com/attachments/645680642704670720/704697846640803850/IMG_20200428_091725.jpg
14:18:55 <secluseian> https://cdn.discordapp.com/attachments/645680642704670720/704698042753744896/IMG_20200428_091814.jpg
14:19:24 <secluseian> reboot system now?
14:20:56 <secluseian> seems succesful
14:21:17 <secluseian> A bad adb I guess
14:34:00 <limitless0[m]> <nscnt "limitless0: Sure, the could be a"> Always best to ask if not sure, Thanks for the answer
14:48:09 <dazinism> I've set up a space for a GrapheneOS community wiki
14:48:55 <dazinism> Was having some doubts about utility as registration process to edit is a bit unusual protracted
14:49:12 <dazinism> *unusual/protracted
14:49:30 <dazinism> But I discovered I can create guest tokens
14:49:54 <dazinism> So can have an 'anonymous' account
14:50:02 <dazinism> For guest edits
14:50:35 <dazinism> Which makes me think its a reasonably good choice of platform for a community wiki
14:50:47 <dazinism> Interested in any thoughts on this
14:51:25 <dazinism> https://hub.libranet.de/wiki/graphene-os/wiki/Home
14:52:09 <dazinism> Theres a wiki page called Platform where I started to run through pros and cons
15:12:34 <joshman[m]> <nscnt "josh.man: "All emails sent to no"> Well, same with signal. All texts to nonSignal users are not encrypted
16:18:17 <nscnt> joshman[m]: Well, true.
16:22:41 <cx2[m]> <joshman[m] "Well, same with signal. All text"> While true, using Protonmail and Signal as examples, it might be unencrypted on the "other end" even emails that were unencrypted in transit, are stored encrypted on Protonmail's servers.... or encrypted on the users phone in Signals case. This is an important distinction.
16:23:24 <nscnt> joshman[m]: I don't know if you do, but I don't send messages to non-Signal users because of that reason.
16:26:51 <cdesai> https://twitter.com/lrvick/status/1255163404500647936?s=20
16:26:51 <cdesai> QR Code scanning on both devices, I wonder where have I seen that before
16:27:19 <nscnt> And I think the problem with email is, that it gets used as security features (like to authenticate users/customers) and many other things even though email is absolutely not the right tool for it.
16:27:48 <nscnt> And email is most of the time the *requirement* for that kind of stuff.
16:28:34 <nscnt> ... requirement to use services.
16:46:35 <dazinism> Just ported the old 'Helping out with GrapheneOS' pad over to the wiki, and updated it a bit
16:46:36 <dazinism> https://hub.libranet.de/wiki/graphene-os/wiki/Helping-graphene-os
17:28:42 <gervarouge[m]> <madaidan[m] "The standard desktop security mo"> With a broken verified boot a la worse than stock rom?
17:30:09 <gervarouge[m]> <madaidan[m] "LineageOS with some of the insec"> With broken verified boot so still worse than stock?
17:35:39 <joshman[m]> <nscnt "josh.man: I don't know if you do"> I don't even have SIM in my phone, so No, I dont use SMS from late 1980s
17:35:57 <dazinism> Well... if I'm understanding correctly its got as much verified boot protection as stock has
17:36:11 <dazinism> User data is protected
17:36:30 <dazinism> Cant access user data if the OS is changed
17:36:58 <gervarouge[m]> So they found other devices with custom key support?
17:37:16 <dazinism> Plus looks like theres plenty of other changes that improve OS over stock
17:37:48 <dazinism> https://hub.libranet.de/wiki/and-priv-sec/wiki/verified-boot
17:38:05 <gervarouge[m]> Well if they can lock the bootloader and verify that's impressive
17:39:01 <dazinism> That page needs editing to reflect recent info on OnePlus
17:39:26 <dazinism> It doesnt really verify with stock
17:42:41 <dazinism> https://freenode.logbot.info/grapheneos/20200422#c3704619
17:45:33 <gervarouge[m]> OnePlus is a security joke...
17:47:13 <IxquickOG[m]> How are their devices wors
17:47:16 <IxquickOG[m]> worse*
17:47:17 <renor[m]> <gervarouge[m] "OnePlus is a security joke..."> I'm curious why
17:47:47 <IxquickOG[m]> (Great minds think alike)
17:50:45 <dazinism> Apparently they do the bare minimum security stuff to comply with Googles requirements to license Play Services
17:50:55 <Hirppa> it does not enforce secure boot
17:51:36 <dazinism> And even apparently, looking at the stuff I just linked in the logs, they dont even totally comply with requirements
17:51:58 <dazinism> Theres the broken verified boot
17:52:18 <dazinism> Report of a vuln that allows full memory to be read
17:52:32 <dazinism> Both in that bit of the logs, if you read
17:53:03 <dazinism> They have history of similar
17:53:05 <gervarouge[m]> Looks like their verified boot system doesn't work, they have lack SELinux rules, they have bad update path, no security chip iirc
17:54:00 <dazinism> Yeah think they just use standard tee rather than chip, like most devices
17:54:39 <dazinism> Think only big volume sellers with security chip are Pixels and some top end Samsung
17:55:12 <gervarouge[m]> The Samsung one is shit though
17:56:04 <dazinism> Yeah Samsung security isnt great either
17:57:20 <dazinism> Loads of dodgy code
17:58:43 <dazinism> Also Motorola
17:59:07 <madaidan[m]> <gervarouge[m] "With broken verified boot so sti"> No, it has verified boot.
17:59:17 <dazinism> Basically - if it matters, get a Pixel
18:02:20 <gervarouge[m]> Yes, I have a Pixel 3 XL and an iPhone 5s. Very happy with both companies
18:03:28 <cx2[m]> considering that the 5s doesn't have support, you may want to reconsider
18:04:32 <cx2[m]> pretty sure that support for the 6 series is also done for that matter
18:04:35 <anupritaisno1[m]> <dazinism "Shame anu doesnt have/work on Pi"> I have slightly different goals than grapheneos
18:04:48 <gervarouge[m]> 5s got an update this month
18:05:08 <anupritaisno1[m]> I want to support more devices. Whenever I find something interesting I do send it to upstream grapheneos however
18:06:09 <gervarouge[m]> The 5s got the latest security patch
18:06:16 <gervarouge[m]> Just confirmed
18:07:03 <gervarouge[m]> 7 years later still going strong
18:11:40 <anupritaisno1[m]> strcat btw
18:11:52 * anupritaisno1[m] uploaded an image: Screenshot_20200428-234101_UnifiedNlp.png (194KB) < https://matrix.org/_matrix/media/r0/download/m.apex.to/WsjsIushpscACqGiheYEpKpR >
18:12:18 <anupritaisno1[m]> You could implement this geocoder
18:13:04 <anupritaisno1[m]> https://github.com/GrapheneOS/os_issue_tracker/issues/23
18:16:11 <gervarouge[m]> Does anyone have a bug in beta where your gesture navigation stops working?
18:19:22 <dazinism> https://securelist.com/apt-phantomlance/96772/
18:20:31 <dazinism> Despite the problems with Fdroid, theres yet to be a known case of any malware / spyware making it into their store
18:20:54 <dazinism> Its not at all uncommon on play
18:22:32 <DannyWorkOrderPr> The type of data smash and grab on Play is very blatant, a bank robbery type of intrusion. The type of exploits we worry about snaking their way into F-Droid would be a bit more sneaky.
18:22:39 <dazinism> Actually depending how you define spyware maybe
18:26:18 <dazinism> Imagine theres folks putting sneaky stuff on Play. Lot more potential targets available / chance the people you want to target are already there..
18:28:26 <gervarouge[m]> <dazinism "Despite the problems with Fdroid"> Isn't it only 0.16% of play apps could be defined as malware?
18:28:59 <gervarouge[m]> There's not enough F-Droid apps to compare
18:29:20 <gervarouge[m]> With how rare Play malware is
18:30:02 <anupritaisno1[m]> Fdroid is a panopticon
18:30:47 <Zenithium[m]> <gervarouge[m] "Isn't it only 0.16% of play apps"> More like 20%
18:31:09 <dazinism> <anupritaisno1[m] "Fdroid is a panopticon"> lol
18:32:03 <dazinism> Have got an academic study somewhere of different app stores
18:32:13 <dazinism> Cant remember the rates
18:33:01 <dazinism> But guess it depends how you define malware. eg. If you dont like your data being sent to Google...
18:33:48 <dazinism> Think majority of apps with network permission use Google Analytics / Crashlytics
18:34:16 <dazinism> Should say I imagine majority of apps
18:34:32 <dazinism> apps on Play Store
18:36:57 <Zenithium[m]> <dazinism "Have got an academic study somew"> I was looking for that one a week ago but I couldn't find it
18:39:10 <dazinism> Also think many apps try to monetise by including ads / trackers....same on iOS
18:42:07 <dazinism> Or app devs use tools that make it easier to build apps, but dont realise they also contain trackers
18:42:53 <DannyWorkOrderPr> <dazinism "Imagine theres folks putting sne"> They don't need to be sneaky. People give permissions away like crazy. They'd give root to their phone if Twitter or the flashlight loaded faster.
18:43:08 <dazinism> https://exodus-privacy.eu.org/en/
18:44:48 <DannyWorkOrderPr> Awesome link
18:58:29 <TheJollyRoger> dazinism: I think something to bear in mind is that insecure, outdated apps present almost as much attack surface as actively malicious ones do. Although the NSA's tried to do things like introduce god-level backdoors, they learned in 2006 that when those get busted red-handed, it breaks the trust the security community has in them and irreparably damages their reputation. No, nowadays, an
18:58:30 <TheJollyRoger> Advanced Persistent Threat would rather do something like use low-hanging fruit like exploit insecure applications or unsecured IoT devices, then use that to pivot to something else similarly vulnerable.
18:59:59 <TheJollyRoger> This has the advantage of being entirely innocent, much more clandestine, and give them plausible deniability, as well as tons of cover traffic because if the vulnerability ever gets found out, they can always throw "them thar advanced sybar-criminuls!!" under the bus.
19:01:56 <TheJollyRoger> So I think that people who are championing F-Droid as being "Malware Free!" are just falling back on the "It's open source, that automagically means it's secure and privacy respecting" fallacy, albeit one wearing groucho-glasses.
19:03:59 <gervarouge[m]> Exodus Privacy is awesome
19:05:32 <TheJollyRoger> I think something F-Droid could do to try to mitigate this problem might be to put an expiry date on all applications that don't get software updates within a certain amount of time. Since they act as a Trusted Third Party, it would be trivially easy for them to stub out apps that are no longer maintained or have fallen into disuse.
19:06:01 <TheJollyRoger> This would go a long way to reducing the amount of cruft they've acquired.
19:06:06 <dazinism> TheJollyRoger: was proper code analysis done by academics that I saw.
19:06:51 <dazinism> was automated, but still code analysis
19:07:05 <dazinism> I agree out of date apps arent great
19:07:11 <TheJollyRoger> dazinism: I'm curious though, did they mention anything along the lines of old/outdated/vulnerable apps that are no longer maintained by their maintainers or have fallen into disuse?
19:07:52 <TheJollyRoger> Since I can trust your word about Play Store Malware, I believe it. :(
19:08:02 <dazinism> If folks are looking for apps, they are presented in chronological order, newest first
19:08:07 <dazinism> So more likely to install newer stuff
19:08:29 <TheJollyRoger> Yeah.
19:09:18 <TheJollyRoger> I really think though, if F-Droid could do something like expire, then stub out old unmaintained apps, that might actually go a huge way toward reducing the amount of cruft they've piled up.
19:09:32 <TheJollyRoger> Without substantially redesigning their architecture.
19:09:56 <gervarouge[m]> Yes
19:10:02 <TheJollyRoger> I admit it wouldn't be a great experience and it'd probably piss off a lot of users who don't know any better though.
19:10:10 <gervarouge[m]> Give apps a 2 year updates rule
19:10:21 <dazinism> Think folks are much more likely to suffer from the kind of malware found on Play than from a sneaky targeted campaign targeted at a Fdroid app
19:10:47 <TheJollyRoger> I really don't know; the problem tends to be that cyberweapons don't stay exclusive to Advanced Persistent Threats/targeted use for long.
19:11:44 <TheJollyRoger> Once EternalBlue was leaked, it was only a matter of days before Petya and NotPetya ravaged the world.
19:12:35 <TheJollyRoger> Mirai was a wakeup call for all of us, as well.
19:13:32 <TheJollyRoger> It operates on the same principle as "It's not the bullet with your name on it that you have to worry about, but the grenade addressed "to whom it may concern."
19:19:53 <TheJollyRoger> I think if there's one thing that computers are pretty good at doing, it's repeating what they're told to do many times over.
19:57:07 <leohopper[m]> hi everyone,
19:59:25 * leohopper[m] sent a long message:  < https://matrix.org/_matrix/media/r0/download/matrix.org/qYzoJfFwrhWQquKlQdSAcSMV >
20:00:16 <leohopper[m]> i don't quite know how to continue from here
20:03:18 <ThomCat[m]> Just use wget
20:03:24 <ThomCat[m]> `wget  https://releases.grapheneos.org/blueline-factory-2020.04.14.23.zip`
20:04:56 <Hirppa> or if you want to use curl, you should use -O parameter, not -0
20:05:08 <Hirppa> ou, not zero'
20:05:27 <leohopper[m]> thanks a lot
20:05:47 <leohopper[m]> embarrassing...
20:06:21 <strcat[m]> leohopper: issue was just that it's -O not -0
20:07:32 <strcat[m]> roboto mono (font used for monospace on the site) has a slash through 0
20:08:25 <strcat[m]> wget does weird stuff
20:08:30 <strcat[m]> don't recommend using it
20:09:42 <Hirppa> oh, what kind of weird stuff?
20:11:23 <strcat[m]> Hirppa: it tries to be overly clever
20:11:33 <strcat[m]> curl does exactly what you say
20:11:34 <strcat[m]> it's a general problem with wget
20:11:45 <Hirppa> ok, I see
20:11:46 <strcat[m]> curl is a lower level tool that just does what you say and I can't see ever wanting what wget tries to do
20:11:58 <strcat[m]> wget will make guesses about what you want
20:12:15 <Hirppa> nice to know :)
20:12:20 <strcat[m]> Hirppa: https://daniel.haxx.se/docs/curl-vs-wget.html
20:13:53 <Hirppa> thanks
20:14:19 <midnight> whaa..  curl supports rtmp?
20:14:32 <strcat[m]> Hirppa: curl is a library + CLI tool for handling URLs basically
20:14:35 <strcat[m]> and curl supports a ton of URL protocols
20:14:54 <strcat[m]> wget is a higher level thing with stuff like an HTML parser
20:15:01 <strcat[m]> wget is just fucking weird
20:17:53 <midnight> I think that page it out of date..
20:18:00 <midnight> Curl can do resuming now I think?
20:18:46 <Hirppa> I have used to wget, but I can see why curl is actually a better option in many use cases
20:20:14 <midnight> That page also suggests trying out aria2, but last I checked aria2c isn't smart enough to do a multi-file partial download resume and for some reason this bug hasn't been fixed in forever. :(
20:20:44 <strcat> yeah curl can resume downloads
20:21:08 <midnight> Ah this table is better: https://curl.haxx.se/docs/comparison-table.html  (at least in the resume parts I looked at)
20:21:24 <strcat> wget just does some weird stuff with automatic file naming, html parsing, automatically doing stuff like calling out to gpg
20:21:40 <strcat> 'Recursive downloads' i.e. html parsing
20:22:07 <midnight> wget more for mirroring-type activity; and while I wish I could get grab-site working, unfortunately the best experience I had with a web mirroring tool is actually pavuk..
20:23:03 <strcat> I also think non-preloaded hsts is somewhat of a misfeature and chromium is greatly restricting it
20:23:17 <strcat> preloaded hsts is the proper way to use it and tools should just support the preload db
20:23:21 <strcat> and not bother maintaining their own cache
20:23:41 <strcat> curl won't auto follow redirects by default or parse links out of html so it doesn't really matter
20:23:48 <strcat> just specify https to it and that's all it will use
20:24:42 <midnight> lol @ ftp 3rd-party transfer
20:25:06 <strcat> ftp is a horrifying protocol
20:25:38 <midnight> I don't mind it; just that things have grown up around it which make its particular method of transfer more difficult.
20:25:48 <strcat> https://en.wikipedia.org/wiki/File_Transfer_Protocol#Communication_and_data_transfer
20:25:50 <strcat> it's horrifying
20:26:21 <midnight> :-) no, it's reasonable, it's just that it's so old thaqt software written which supports it tends to do so very badly.
20:26:27 <strcat> firewalls need complex stateful handling of ftp
20:26:44 <strcat> nothing should work that way
20:27:02 <strcat> it should use the connection you make
20:27:09 <midnight> FTP is from a time when NAT and stateful firewalling of that sort wan't necessary. That form of firewalling became ubiquitous well after FTP was a thing.
20:27:25 <strcat> not talking about NAT necessarily
20:27:46 <strcat> it should use 1 connection really
20:27:50 <midnight> In-band requires protocol, but protocol handshaking is supposed to be the thing the kernel does.
20:27:53 <strcat> it's just wrong :P
20:28:35 <midnight> lol no it's just a different way of doing things that doesn't mesh with current firewalling technique so well.
20:28:57 <strcat> it's inefficient too
20:29:19 <strcat> http2 is an example of a nice file transfer protocol but there are many custom protocols doing the same thing
20:29:32 <strcat> i.e. multiplexed streams within 1 connection that don't block each other
20:29:55 <strcat> http 1.1 pipelining sucks by comparison since it enforces order and can't multiplex
20:30:32 <strcat> midnight: so for example with http2 you can request 4 files right away and it sends them in blocks in whatever order it wants, they can be mixed together, no problem
20:30:43 <strcat> over 1 connection
20:30:59 <strcat> the only remaining issue with it performance-wise is that it's built on TCP which is a shit protocol
20:31:04 <strcat> since TCP emulates a stream
20:31:15 <midnight> The massive amount of logic required to handle http2 is an attack surface which has spawned IMO far more vulnerabilities overall. :( But really the nature of simplicity really should spawn a superior file-transfer-only protocol rather than trying to everything-is-a-hammer it with http. :(
20:31:24 <strcat> so if you have packets being dropped randomly (which you do on mobile) or you're switching connections
20:31:26 <strcat> it handles that badly
20:31:33 <midnight> TCP's exponential backoff was the only reason the internet didn't implode for decades.
20:31:42 <strcat> midnight: http2 is actually a really good file transfer protocol
20:31:59 <strcat> overly complex for that use sure but you already use it for many things
20:32:06 <strcat> it's less attack surface to reuse 1 protocol
20:32:12 <strcat> that's able to handle everything well
20:32:17 <midnight> The stuff coming including the elimination of exponential backoff will force backbone operators to punish non-responsive streams. The research for that's already done but wasn't implemented because TCP responded properly.
20:32:56 <midnight> The logic is extremely complex to support http2; authors get around that by writing subsets of protocol support.
20:33:10 <strcat> you just use a library like libcurl
20:33:21 <strcat> multiplexed streams are complex
20:33:25 <midnight> Right, which means that one lib is embedded everywhere right.
20:33:39 <strcat> yeah and ideally it would be written in rust
20:33:41 <strcat> not C
20:34:00 <midnight> I would be curious as to whether the additional exposure finds bugs more efficiently than the complexity introduces them. Hrm.. I wonder if there's research on that.
20:34:34 <strcat> it should just be written in a memory safe language so those kinds of bugs aren't exploitable vulnerabilities
20:34:41 <strcat> other than crypto stuff, etc.
20:35:25 <strcat> midnight: in general stuff should use http + tls because everything using the same thing avoids a lot of code / complexity
20:35:27 <midnight> ..  ah. That's incorrect though.
20:35:34 <strcat> and yes http2 is more complex since it supports multiplexing
20:35:40 <midnight> openssl is a horror.
20:35:59 <strcat> openssl isn't the only TLS implementation
20:36:04 <strcat> it's not what Android uses
20:36:22 <midnight> Most TLS implementations are similarly horrors -- but that means there's not one codebase right.
20:36:31 <strcat> not sure what you mean
20:36:45 <strcat> my point is that programs shouldn't reinvent the wheel, HTTP and TLS are broadly used
20:36:49 <strcat> using them more doesn't add attack surface
20:36:57 <midnight> The http+ tls = avoids complexity because it's one thing everywhere comment you made above.
20:37:10 <strcat> and then it's straightforward to provide a memory safe implementation
20:37:14 <strcat> of the protocol everything uses
20:37:18 <midnight> Because the dozens of implementations mean that's not really the case.
20:37:18 <analogpathy[m]> Has anyone ever used Yggdrasil or Orbitdb?
20:37:19 <strcat> instead of having 1000 custom protocols
20:37:26 <strcat> midnight: not sure what you mean by that
20:37:28 <midnight> Rust has its own issues; as does cargo.
20:37:35 <strcat> how many TLS libraries do you think android has
20:37:56 <midnight> "in general stuff should use http + tls because everything using the same thing avoids a lot of code / complexity" <-- the reality is nobody does, so this benefit doesn't exist.
20:37:57 <strcat> it doesn't use nss, openssl, gnutls
20:38:06 <strcat> midnight: 'nobody does'?
20:38:11 <strcat> nearly everything uses those
20:38:20 <midnight> s/nobody/not everyone/
20:38:22 <strcat> very few programs invent their own cryptographic protocol
20:38:53 <strcat> every program not rolling their own transport protocol and cryptographic protocol or using something obscure is 1 less to deal with
20:38:54 <midnight> I know you're looking at it from an android perspective, and I know nothing about android; I'm more looking from a global perspective.
20:39:08 <strcat> I'm looking at it from a global perspective
20:39:11 <strcat> of having 2 libraries to implement
20:39:18 <midnight> Oh, you're describing android stuff above.
20:39:19 <strcat> and dropping them in and having everything use them
20:39:36 <strcat> and having those protocols handle every use case well (HTTP/2 is not quite there due to being based on TCP)
20:40:38 <strcat> HTTP/3 is just HTTP/2 over QUIC with tweaks to make it handle having multiplexing in the low level protocol (i.e. it can't assume header data is in order, etc.)
20:40:53 <strcat> and QUIC uses a userspace implementation on top of UDP
20:41:05 <midnight> yeah I know what quic is.
20:41:14 <strcat> UDP just adds ports to IP, it's ridiculously simple
20:41:19 <strcat> the rfc is like 2 pages
20:41:29 <strcat> https://tools.ietf.org/html/rfc768
20:41:47 <midnight> length + checksum..
20:42:55 <midnight> But packet loss and backbone routing mean that UDP isn't enough; so the rest of that stuff that comes through in terms of reliably getting a file across means programs have to do weird clever stuff.. fountain codes, or reimplement reliability/transmission windows, and back-off, and so on.
20:43:13 <strcat> midnight: that's what QUIC is
20:43:20 <strcat> programs don't need to invent anything new
20:44:47 <midnight> It *seems* as though the stuff you  dislike about TCP are mostly-reimplemented in whatever is replacing it. Although it's true that removing the in-order requirements and a couple other guarantees in TCP would likely help with discrete in-advance/known file transfer segments.
20:45:18 <strcat> no QUIC is substantially lower latency, has better bandwidth estimation to reduce congestion and has better throughput
20:45:54 <strcat> and is multiplexed i.e. you can have N streams instead of it providing 1 stream
20:46:00 <midnight> Lack of exponential backoff universally as with e.g. BBR, will, eventually, force the backbone routers to punish those streams more harshly when they ignore the packet-dropping signalling.
20:46:09 <strcat> it has backoff
20:46:15 <strcat> it has better congestion control that TCP
20:46:18 <strcat> than*
20:46:30 <midnight> By what definition though, right. That's a user's perspective.
20:46:39 <strcat> not sure what you mean by that
20:46:46 <strcat> it causes less congestion than TCP
20:47:18 <strcat> it uses UDP as the base so it can work without operating systems and routers needing to add something new
20:47:51 <midnight> Uh..  wait wait. Why do you think QUIC has better congestion avoidance?
20:47:56 <strcat> but it's essentially a stream protocol like TCP, just more modern i.e. multiplexed streams, lower latency, higher bandwidth, better congestion control (better at ramping up to max bandwidth and better at not causing congestion)
20:48:09 <strcat> midnight: because it does?
20:48:20 <strcat> not sure where you get the idea that it's like using raw UDP, it's not
20:48:28 <midnight> ..  I'm not.
20:48:30 <strcat> it uses UDP as the base for backwards compatibility
20:49:17 <midnight> You mean from the perspective of a user trying to feed data through right?
20:49:36 <strcat> it causes less congestion problems
20:49:42 <strcat> because it's better at throttling itself
20:50:00 <strcat> it's not just better at ramping up, it's better at not causing congestion
20:50:02 <midnight> It's better than the self-sacrifice of exponential backoff?
20:50:22 <midnight> Better ramp-up does not help with congestion *in the intervening routers.*
20:50:34 <strcat> you should read about it
20:50:39 <strcat> you're saying things that don't make sense
20:51:03 <strcat> like implying it doesn't have comparable backoff support as TCP, it's just implemented in a more modern way
20:52:00 <strcat> TCP being so horrible is why anything soft-real-time has had to invent their own protocols
20:52:32 <strcat> real time voice / video, games, whatever else
20:52:38 <strcat> none of it can use TCP
20:52:51 <strcat> and you can't just use UDP either you have to invent a stream protocol on top of it
20:52:56 <midnight> You're not defining how that helps *internet* congestion in terms of intervening routers falling over. I'm saying it doesn't. BBR, QUIC, etc all are currently taking advantage of the fact that backbone routers aren't directly killing individual streams, which means the benefits are in part due to the fact that everyone is currently using TCP, so *those* streams get punished and the QUIC/etc stuff
20:52:58 <strcat> and reinvent everything TCP does just properly
20:53:02 <midnight> appears to benefit from the user's perspective in terms of latency, and bandwidth, etc.
20:53:23 <strcat> midnight: no that's not how it works
20:53:28 <strcat> midnight: I suggest reading about it
20:55:21 <strcat> the multiplexing is a huge advantage for this too
20:56:48 <strcat> midnight: read https://tools.ietf.org/html/draft-tsvwg-quic-loss-recovery-01
20:57:08 <strcat> I don't think that's current though
20:57:15 <strcat> let me see where the current one is
20:57:44 <strcat> ok it's https://tools.ietf.org/html/draft-ietf-quic-recovery-27
20:58:14 <midnight> .. just, for reference sake, I've been writing and making custom low-level (but very simplistic) protocols since the 90s. I know what UDP is, and I know what TCP is. I've also worked as a network admin for a large-ish ISP running signfiicantly-sized routers. I don't need to read about it; I appreciate your perspective, and in my opinion what's happening here is just a failure to communicate.
20:58:21 <midnight> Respectfully, I'm going to stop discussing it because it appears to be antagonizing you and for that I sincerely apologize. I'm not interested in making a pest of myself. With respect, I'm going to bow out of this conversation for now, and I wish you well, sincerely. :-(
20:58:38 <strcat> or you could just read https://tools.ietf.org/html/draft-ietf-quic-recovery-27
20:59:12 <strcat> you're incorrect in thinking that QUIC doesn't have comparable congestion control, it's better at it
21:00:11 <strcat> TCP does NOT work well on lossy networks like mobile devices
21:00:51 <strcat> it's not actually good at avoiding congestion and it creates a ton of waste when the connection is lossy
21:01:20 <strcat> so everyone makes their own protocols on UDP that are usually very incomplete reinventions of TCP
21:01:33 <strcat> with some problems fixed but major issues since they're incomplete
21:02:37 <strcat> WebRTC made a SCTP-based protocol
21:02:42 <strcat> because they couldn't use TCP ofc
21:02:58 <strcat> so QUIC will replace that and TCP
21:03:26 <strcat> and that WebRTC protocol also does congestion control in a perfectly fine TCP-friendly way
21:03:33 <strcat> neither of them screw over TCP at all
21:05:03 <strcat> if you care about stuff screwing over TCP connections then you should be all for replacing all the custom UDP-based protocols with QUIC since it
21:05:10 <strcat> has *better* congestion control than TCP
21:05:25 <strcat> and is designed to work alongside TCP properly just like WebRTC was
21:06:57 <strcat> Signal used to use their own protocol but switched to WebRTC since it supports the same soft-real-time encrypted voice (doing encryption makes this stuff harder, QUIC was designed for encryption, WebRTC had to take SCTP and stick it on top of an encryption protocol for it on top of UDP)
21:07:39 <strcat> WebRTC is a custom SCTP over DTLS over UDP
21:08:56 <strcat> it's far better to have 1 protocol that provides low latency, multiplexing, encryption, better congestion control, better handling of lossy links i.e. QUIC
21:09:14 <strcat> TCP is not good for anything and doesn't really support mobile
21:09:29 <strcat> can't handle lossy links and handles network switches poorly
21:09:59 <strcat> can't do soft real time, and isn't actually good at avoiding congestion, it's only good if you compare it to people rolling homegrown protocols
21:10:51 <strcat> each application needing to roll their own protocol and handle all these complex things (especially encryption - which nearly all skip, along with congestion control)
21:10:55 <strcat> is not simpler
21:11:02 <strcat> than 1 protocol able to do it all well
21:11:43 <strcat> do you think games use encryption? or most voice/video software? even super popular stuff like Zoom has totally shit / terrible homegrown encryption because doing soft real time networking with encryption is *hard*
21:11:48 <strcat> as are other aspects of it
21:12:15 <strcat> WebRTC had to roll their own protocol that's a weird frankenstein thing really
21:13:06 <strcat> WebRTC-over-QUIC will be simpler and the real benefit is you replace TCP, SCTP, SCTP-over-UDP, SCTP-over-DTLS-over-UDP, DTLS-over-UDP and nearly all the custom UDP protocols everything like games use without encryption
21:13:08 <strcat> *shrug*
21:13:32 <strcat> also
21:13:43 <strcat> text-based protocols are *harder* to implement securely
21:14:16 <strcat> binary frames with a fixed-size length where you know exactly how much data you need to read is easier to do securely/correctly
21:14:33 <strcat> ofc having multiplexing makes things more complicated, but that's why it covers so many more use cases
21:14:39 <strcat> and handles the same use cases better
21:15:33 <strcat> TCP isn't suitable for soft-real-time or mobile and just can't really be used
21:15:56 <strcat> another example is SSH - TCP makes it have terrible latency, so there's stuff like mosh i.e. all those custom protocols
21:17:15 <strcat> TCP gives you bad latency, inefficient throughput, bad congestion handling, bad handling of lossy links, and it's generally all in the kernel (privileged code + really hard to improve) and hard-wired into routers vs QUIC which is in userspace as a library
21:17:33 <strcat> these things being so bad is part of why there are so many problems like insecure voice/video chat
21:18:19 * TheJollyRoger buries his head in his hands.
21:18:20 <strcat> if you wonder why encrypted voice/video was so rare before WebRTC
21:18:23 <strcat> TCP has a lot to do with it
21:18:25 <strcat> it's shit
21:19:09 <strcat> and when I say encrypted
21:19:12 <strcat> I mean actually encrypted
21:19:14 <strcat> properly
21:19:32 <strcat> not like zoom using unauthenticated encryption also they LITERALLY use AES in ECB mode because this is a hard problem
21:20:00 <strcat> with QUIC you can just build a video protocol right on top of it
21:20:04 <strcat> you can't use TCP...
21:20:19 <strcat> so what everyone did is build custom protocols on UDP doing encryption, congestion control and lots of other stuff wrong
21:20:25 <strcat> i.e. pretty much EVERY video/voice software
21:20:29 <strcat> except Signal and WebRTC
21:24:34 <strcat> it wouldn't make sense (rather than using QUIC directly) but you could implement real time voice/video on top of HTTP/3 (HTTP/3 is HTTP/2 over QUIC)
21:24:50 <strcat> and you get encryption and all those improvements over TCP without rolling anything yourself
21:25:00 <strcat> ofc I'd expect non-file-transfer software to use QUIC directly
21:26:10 <TheJollyRoger> Wait wait wait, Zoom uses AES in Electronic Code Book mode?
21:26:25 <strcat> yes
21:26:31 <TheJollyRoger> I thought you're not supposed to do that because then the blocks of ciphertext all start to look the same even when they're encrypted.
21:26:55 <strcat> TheJollyRoger: it provides no authentication and a block of the same data encrypted again will be encrypted to the same ciphertext
21:27:04 <TheJollyRoger> So... wouldn't that just mean that the ciphertexts would just look like the plaintexts with weird colours...?
21:27:08 <strcat> TheJollyRoger: video/voice over IP is not a stream of data
21:27:33 <TheJollyRoger> Er, I mean, the ciphertext images would look like the plaintext images with weird colours?
21:27:35 <strcat> TheJollyRoger: it's extremely multiplexed
21:28:12 <strcat> TheJollyRoger: it's only identical message blocks that will be the same
21:28:17 <strcat> but message blocks are pretty small
21:28:20 <TheJollyRoger> Oh.
21:29:13 <strcat> TheJollyRoger: you can't just use a normal stream cipher when multiplexing the stream
21:29:21 <strcat> multiplexed streams*
21:30:11 <strcat> TheJollyRoger: the way it works is you're sending data in parallel and if data is lost along the way it's just not going to be used so encryption and compression need to be designed for that
21:30:42 <strcat> TheJollyRoger: when packets are lost you can't just completely stall data transfer until that's handled
21:30:46 <strcat> that's how TCP works
21:30:50 <TheJollyRoger> Sheesh.
21:30:55 <strcat> packets lost -> need to be handled, stalls whole connection
21:30:58 <strcat> it's 1 stream received in order
21:31:49 <strcat> TheJollyRoger: you need to encrypt packets individually basically
21:31:57 <strcat> and the protocol has to be designed for that
21:32:17 <strcat> so then you can decrypt / verify data as it comes
21:32:20 <TheJollyRoger> Wow. And if we authenticate each packet on its own independently of its peers that'd take way too much CPU time?
21:32:31 <strcat> TheJollyRoger: no the issue is that this is hard to do
21:32:45 <strcat> TheJollyRoger: what cipher mode for AES would you use
21:32:51 <strcat> to receive
21:32:55 <strcat> tons and tons of data
21:33:07 <strcat> without receiving ALL the data (since you don't wait for lost data really)
21:33:16 <strcat> and with it multiplxed
21:33:20 <strcat> multiplexed
21:33:27 * TheJollyRoger starts to break out in a cold sweat.
21:33:38 <strcat> TheJollyRoger: you can't use something like CBC because it depends on previous messages
21:33:43 <strcat> and if you use something that depends on a counter
21:33:45 <strcat> what's the counter?
21:33:53 <TheJollyRoger> Well we can't use anything that involves cipher block chaining or counter mode because then one missed block means the entire thing becomes corrupted...
21:33:56 <strcat> QUIC gives you a proper never reused sequence number
21:34:56 <strcat> TheJollyRoger: it's a hard problem, WebRTC solved it with a custom SCTP on top of DTLS on top of UDP
21:35:45 <strcat> QUIC solves it better and is a generic protocol, it's basically TCP done right, with lower latency, higher bandwidth, better / friendlier congestion control, multiplexing and proper encryption support
21:35:57 <strcat> and removes the need to have all these custom UDP protocols
21:36:13 <strcat> you just build your application protocol (voice, video, games, whatever) on top of it
21:36:25 <strcat> and it covers encryption and multiplexing
21:36:47 <strcat> and you get low latency and the multiplexed streams don't block each other when packets are lost like doing it on TCP
22:19:42 <est4> Is it possible to verify the GPG signature of a package on graphene?
22:20:17 <est4> eg. for manually downloaded f-droid apks
22:22:41 <strcat[m]> est4: apks have internal signatures, it doesn't make sense to use GPG
22:22:56 <gervarouge[m]> <est4 "Is it possible to verify the GPG"> Verify it on your PC and copy it over
22:22:56 <gervarouge[m]> A terminal app can verify it but you'll probably want to verify it so the point is defeated
22:23:44 <est4> What if I don't have access to a pc? Should I not bother at all?
22:23:46 <strcat[m]> est4: but sure you can verify GPG signatures with openkeychain I just don't recommend using GPG unnecessarily
22:23:49 <strcat[m]> should be considered deprecated and used only sparingly as needed
22:23:55 <strcat[m]> est4: read what I wrote first
22:24:05 <strcat[m]> you don't need to do it on a computer and in fact that's a bad idea
22:24:16 <strcat[m]> because then you're unnecessarily trusting that extra computer
22:24:26 <strcat[m]> but why are you using GPG to verify an apk?
22:24:28 <strcat[m]> apks are signed
22:24:58 <est4> I don't know how it works beneath the surface. Just looking for best practices for a layman
22:25:42 <strcat[m]> est4: if you're installing an apk as an upgrade to an existing app the OS performs signature verification and downgrade protection
22:25:50 <strcat[m]> whether you're installing via F-Droid or manually
22:26:14 <strcat[m]> if you're installing it for the first time, then you're relying on F-Droid to verify it based on the repository metadata
22:26:24 <strcat[m]> if you're doing it by hand you need to verify the certificate and version by hand but the OS ALWAYS verifies the signature
22:29:50 <est4> is it better to source for the apk from official sources directly, or use f-droid?
22:30:02 <est4> for apks*
22:31:38 <TheJollyRoger> est4: best to source from official sources directly if they self-update.
22:32:08 <est4> ah, snap. Most applications don't
22:32:31 <TheJollyRoger> est - It's a long standing basic Android security policy that all APKs are internally signed with a certificate. WHen you first install an APK, Android checks the certificate, and pins it in place for the lifetime of the app. This is a "trust on first use" model.
22:33:24 <TheJollyRoger> Subsequent versions must be valid, and be signed by a certificate that matches the previous one, which in turn matches the previous one, which in turn matches the previous one, all the way back to when that app was first installed.
22:34:05 <est4> what happens if it doesn't match? Installation will abruptly fail?
22:34:31 <TheJollyRoger> Yep, it won't allow you to install it at all.
22:35:22 <est4> TheJollyRoger: I'm looking for a suitable method of verifying signal safety numbers. What are the best options, if face to face meetups, video conferencing and phone calls aren't options?
22:35:50 <TheJollyRoger> If you need to, you can use Android Studio to check the certificate fingerprint manually, and this is actually safer than using GPG because until v5 keys get here, at this moment GPG uses SHA-1 as a fingerprinting algorithm.
22:37:17 <TheJollyRoger> If none of those are an option and you have no preexisting and end-to-end authenticated back channel to your correspondents, put your half of the safety numbers in as many social media outlets as you possibly can and publish their locations, with the hopes that an active adversary out to get you will have difficulty compromising all of them.
22:37:55 <TheJollyRoger> Your safety numbers are actually hashes of not one, but in fact two key fingerprints displayed one after the other.
22:38:11 <TheJollyRoger> So you can simply find yours by looking at which numbers remain the same contact to contact.
22:38:39 <est4> Right, so publish that one-half that belongs to me on an accessible profile?
22:38:58 <TheJollyRoger> Yes, just your half.
22:39:01 <est4> How would I go about verifying that of my contact's?
22:39:02 <TheJollyRoger> Let me show you...
22:39:09 <TheJollyRoger> You'd probably have to ask them to do the same.
22:39:30 <est4> How should I go about following up IF the safety numbers don't match on either ends?
22:39:40 <TheJollyRoger> https://github.com/Peter-Easton/keys/blob/master/my-contact-info.txt
22:40:14 <TheJollyRoger> Note that I PGP-sign my contact information; however, this is largely because I actually have direct face-to-face connections to many of the contacts I use GPG with.
22:40:46 <TheJollyRoger> And they trust me not to perform collision attacks and forge other people's GPG  keys.
22:41:10 <TheJollyRoger> Because of SHA-1.
22:41:47 <TheJollyRoger> If I would probably NOT suggest the same thing in your position if you don't trust your contacts.
22:42:20 <TheJollyRoger> If it doesn't match, then go ask them via a back channel.
22:42:35 <TheJollyRoger> There are several innocent reasons that it could fail, including relaying with a different device, or copying the wrong numbers, etc.
22:43:09 <est4> Correct me if I'm wrong, but I don't see the point in publishing a PGP signed message if none of my contacts are going to verify it
22:43:28 <TheJollyRoger> You're not wrong. Once again, I do it because I'm in a very privileged position to do so.
22:43:44 <est4> Can you provide some example of ideal backchannels?
22:43:56 <TheJollyRoger> A face-to-face meeting at a local restaurant.
22:44:09 <TheJollyRoger> For low threat models.
22:44:34 <est4> "<est4> TheJollyRoger: I'm looking for a suitable method of verifying signal safety numbers. What are the best options, if face to face meetups, video conferencing and phone calls aren't options"
22:44:37 <est4> back to square one :(
22:44:51 <TheJollyRoger> Yep. So if worst comesto worst, you trust on first use.
22:45:42 <TheJollyRoger> Just a sec, I will return shortly.
22:45:51 <est4> > "TheJollyRoger> You'd probably have to ask them to do the same."
22:46:03 <est4> They won't bother
22:46:11 <est4> Difficult problem, no easy solution it seems. Sigh.
23:22:34 <TheJollyRoger> Yep, fixing people is harder than fixing tech.
23:23:59 <TheJollyRoger> Reminds me. I should push some other things to that repo.
23:24:01 * JTL reembers the GSMK Cryptophone from Germany/Netherlands which would use it's own VoIP "app" with "hash readout" to authenticate the encryption channel
23:24:09 <TheJollyRoger> Heh, aw man.
23:24:25 <TheJollyRoger> I wonder if there'd be a way to express a SHA-256 hash as a wordlist.
23:24:35 <JTL> I'm sure they'd know :)
23:24:40 <TheJollyRoger> Whew.
23:41:51 <strcat> btw nagle's algorithm is a terrible horrifying thing
23:42:21 <strcat> just a simple http server benchmark with ab using keepalive connections
23:42:23 <TheJollyRoger> Wha-- What's that?
23:42:30 <strcat> i.e. reusing same connection for all of it
23:42:44 <strcat> no concurrency for this initial test
23:42:57 <strcat> Requests per second:    3234.22 [#/sec] (mean)
23:43:02 <strcat> that's with TCP_NODELY
23:43:05 <strcat> TCP_NODELAY
23:43:11 <strcat> this is without:
23:43:13 <strcat> Requests per second:    22.54 [#/sec] (mean)
23:43:23 <strcat> and the DEFAULT is not having TCP_NODELAY
23:43:30 <strcat> funny feature
23:43:37 <JTL> strcat: I had the same conclusion
23:43:42 <JTL> (when doing similar tests in the past)
23:43:44 <JTL> heh
23:43:47 * TheJollyRoger lifts off his Eyepatch-Of-POwer, leans close, and squints at the text on the screen.
23:44:37 <strcat> anyways I realized this is why AttestationServer had perf issues
23:44:41 <strcat> btw I'm benchmarking over localhost
23:45:07 <strcat> 22 requests/s per concurrent thread making requests without TCP_NODELAY (when reusing the connection)
23:46:18 <strcat> TheJollyRoger: keepalive reuses connections rather than tearing down
23:46:31 <strcat> but it makes nagle's algorithm kick in since they're long-lived connections
23:46:38 <strcat> and it starts purposely delaying traffic for ages basically
23:46:43 <strcat> to try to make bigger packets
23:46:47 <TheJollyRoger> Oh sheesh. So they just hog a whole connection all for themselves just to say "hello, I'm here?"
23:47:00 <strcat> TheJollyRoger: well I'm talking about nagle's
23:47:04 <strcat> keepalive is a useful optimization
23:47:22 <strcat> ofc it places more load on the server when most clients are just using it but not actually reusing connections much
23:47:32 <strcat> the server can close them when it wants tho
23:47:36 <strcat> including immediately
23:47:54 <strcat> this is with TCP_NODELAY
23:47:57 <strcat> no keepalive:
23:48:28 <strcat> ugh
23:48:35 <strcat> it's so annoying benchmarking a java server application
23:48:42 <strcat> it fucking recompiles itself as you go
23:48:51 <strcat> need to warm it up more first
23:49:02 <strcat> it just massively changed performance halfway through testing even tho I warmed it up
23:49:16 <strcat> decided to optimize more
23:49:32 <JTL> > 16:48 <@strcat> it fucking recompiles itself as you go
23:49:34 <JTL> You mean debugging at runtime?
23:49:56 <renlord> trying to extract symbols from a rust binary taking forever.
23:50:12 <renlord> why is the symbol table for rust binaries so fkin big
23:50:35 <strcat> JTL: nah benchmarking a java server app
23:50:44 <strcat> and after running like 80000 requests
23:50:44 <JTL> Ah okay
23:50:48 <strcat> it decided to optimize itself more
23:51:07 <strcat> so I have this graph of perf and you can see it jumps
23:51:59 <renlord> thousands of GCC_except_table(s)
23:52:32 <strcat> renlord: from panic unwinding
23:52:34 <strcat> unwinding sucks
23:52:40 <strcat> rust shouldn't have included it
23:52:52 <strcat> alright here we go
23:53:00 <strcat> this is TCP_NODELAY without keepalive (new connection each time):
23:53:02 <strcat> Requests per second:    3182.53 [#/sec] (mean)
23:53:31 <strcat> this is TCP_NODELAY with keepalive (reuse):
23:53:33 <strcat> Requests per second:    5537.69 [#/sec] (mean)
23:54:13 <strcat> now let me warm it up more
23:55:20 <strcat> without TCP_NODELAY and without keepalive:
23:55:21 <strcat> Requests per second:    3177.71 [#/sec] (mean)
23:55:25 <strcat> basically the same as above as expected
23:55:43 <strcat> and now lets do keepalive, which SHOULD be an optimization, reusing the connection...
23:55:47 <strcat> Requests per second:    22.78 [#/sec] (mean)
23:55:50 <strcat> fucking terrible
23:55:53 <strcat> holy shit
23:55:55 <strcat> explains a lot
23:56:29 <renlord> do we know why?
23:56:42 <strcat> yes
23:56:54 <strcat> nagle's algorithm is a terrible thing in 2020
23:57:17 <strcat> and TCP is terrible even with TCP_NODELAY, TCP fast open and assorted other optimizations
23:58:05 <strcat> QUIC with TLS is faster than TCP without TLS
23:58:16 <strcat> it builds in the TLS handshake to the protocol handshake
23:58:18 <strcat> mmm
23:58:38 <renlord> quic is still draft though
23:59:28 <renlord> i suppose that now that internet backbone is more reliable, raw udp works ok too
